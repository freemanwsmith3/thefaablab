{"version":3,"sources":["src/YLine.js"],"names":["YLine","React","Component","render","width","yScale","value","xScale","xLimit","spacingLeft","spacingRight","style","props","className","lineY","lineX","x1","x2","y1","y2","PropTypes","func","number","oneOfType","string","instanceOf","Date","isRequired","object"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;AAGe,MAAMA,KAAN,SAAoBC,eAAMC,SAA1B,CAAoC;AAgDjDC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,MAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,MAJI;AAKJC,MAAAA,MALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA,YAPI;AAQJC,MAAAA;AARI,QASF,KAAKC,KATT;AAUA,UAAMC,SAAS,GAAI,oBAAmB,KAAKD,KAAL,CAAWC,SAAX,IAAwB,EAAG,EAAjE;AACA,UAAMC,KAAK,GAAGT,MAAM,CAACC,KAAD,CAApB;AACA,UAAMS,KAAK,GACT,OAAOP,MAAP,KAAkB,WAAlB,GAAgCJ,KAAK,GAAGM,YAAxC,GAAuDH,MAAM,CAACC,MAAD,CAD/D;AAGA,wBACE;AACE,qBAAY;AADd,OAEM;AACFQ,MAAAA,EAAE,EAAE,CAACP,WADH;AAEFQ,MAAAA,EAAE,EAAEF,KAFF;AAGFG,MAAAA,EAAE,EAAEJ,KAHF;AAIFK,MAAAA,EAAE,EAAEL,KAJF;AAKFD,MAAAA,SALE;AAMFF,MAAAA;AANE,KAFN,EADF;AAaD;;AA7EgD;;;;gBAA9BX,K,eACA;AACjB;;;AAGAK,EAAAA,MAAM,EAAEe,mBAAUC,IAJD;;AAKjB;;;AAGAjB,EAAAA,KAAK,EAAEgB,mBAAUE,MARA;AASjBhB,EAAAA,KAAK,EAAEc,mBAAUG,SAAV,CAAoB,CACzBH,mBAAUE,MADe,EAEzBF,mBAAUI,MAFe,EAGzBJ,mBAAUK,UAAV,CAAqBC,IAArB,CAHyB,CAApB,EAIJC,UAbc;;AAcjB;;;AAGApB,EAAAA,MAAM,EAAEa,mBAAUC,IAjBD;AAkBjBb,EAAAA,MAAM,EAAEY,mBAAUG,SAAV,CAAoB,CAC1BH,mBAAUE,MADgB,EAE1BF,mBAAUI,MAFgB,EAG1BJ,mBAAUK,UAAV,CAAqBC,IAArB,CAH0B,CAApB,CAlBS;;AAuBjB;;;AAGAjB,EAAAA,WAAW,EAAEW,mBAAUE,MA1BN;;AA2BjB;;;AAGAZ,EAAAA,YAAY,EAAEU,mBAAUE,MA9BP;;AA+BjB;;;AAGAX,EAAAA,KAAK,EAAES,mBAAUQ,MAlCA;;AAmCjB;;;AAGAf,EAAAA,SAAS,EAAEO,mBAAUI;AAtCJ,C;;gBADAxB,K,kBAyCG;AACpBW,EAAAA,KAAK,EAAE,EADa;AAEpBE,EAAAA,SAAS,EAAE,EAFS;AAGpBJ,EAAAA,WAAW,EAAE,CAHO;AAIpBC,EAAAA,YAAY,EAAE;AAJM,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\n/**\n * `YLine` is a horizontal line rendered on the y axis\n */\nexport default class YLine extends React.Component {\n  static propTypes = {\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Width of chart - provided by XYPlot.\n     */\n    width: PropTypes.number,\n    value: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    xLimit: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]),\n    /**\n     * Spacing left - provided by XYPlot\n     */\n    spacingLeft: PropTypes.number,\n    /**\n     * Spacing right - provided by XYPlot\n     */\n    spacingRight: PropTypes.number,\n    /**\n     * Inline style object to be applied to the line\n     */\n    style: PropTypes.object,\n    /**\n     * Class attribute to be applied to the line\n     */\n    className: PropTypes.string,\n  };\n  static defaultProps = {\n    style: {},\n    className: '',\n    spacingLeft: 0,\n    spacingRight: 0,\n  };\n\n  render() {\n    const {\n      width,\n      yScale,\n      value,\n      xScale,\n      xLimit,\n      spacingLeft,\n      spacingRight,\n      style,\n    } = this.props;\n    const className = `rct-chart-line-y ${this.props.className || ''}`;\n    const lineY = yScale(value);\n    const lineX =\n      typeof xLimit === 'undefined' ? width + spacingRight : xScale(xLimit);\n\n    return (\n      <line\n        aria-hidden=\"true\"\n        {...{\n          x1: -spacingLeft,\n          x2: lineX,\n          y1: lineY,\n          y2: lineY,\n          className,\n          style,\n        }}\n      />\n    );\n  }\n}\n"],"file":"YLine.js"}