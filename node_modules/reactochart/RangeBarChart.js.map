{"version":3,"sources":["src/RangeBarChart.js"],"names":["RangeBarChart","React","Component","getDomain","props","xScaleType","yScaleType","horizontal","data","x","xEnd","y","yEnd","rangeAxis","rangeStartAccessor","rangeEndAccessor","rangeScaleType","rangeDataType","getSpacing","barThickness","xScale","yScale","xDomain","yDomain","P","barsDomain","barsScale","barsAccessor","barsDataDomain","domainHead","domainTail","map","sort","dataDomainHead","dataDomainTail","spacingTail","spacingHead","spacingTop","spacingBottom","spacingLeft","spacingRight","shouldComponentUpdate","nextProps","shouldUpdate","render","barClassName","barStyle","showLabels","barLabelFormat","labelDistance","labelClassName","d","i","onMouseEnter","onMouseMove","onMouseLeave","onClick","eventName","callback","barProps","undefined","key","thickness","showLabel","labelFormat","className","style","PropTypes","array","isRequired","bool","CustomPropTypes","valueOrAccessor","func","number","oneOfType","object","string","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar"],"mappings":"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","sourcesContent":["import first from 'lodash/first';\nimport last from 'lodash/last';\nimport clamp from 'lodash/clamp';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Bar from './Bar';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport {\n  domainFromData,\n  domainFromRangeData,\n  getValue,\n  makeAccessor2,\n} from './utils/Data';\nimport { bindTrailingArgs } from './util.js';\nimport { dataTypeFromScaleType } from './utils/Scale';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\n/**\n * `RangeBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\n * value on the *independent* axis (X axis for vertical bars), and is centered on this value.\n * However, on the *dependent* axis, each bar represents a *range* (min/max) of values,\n * rather than always starting at zero.\n */\n\nexport default class RangeBarChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in this array.\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Accessor function for bar X values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the *independent* variable value on which the bar is centered.\n     * If `horizontal` is `true`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum X-values) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `true` (ignored otherwise).\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     * If `horizontal` is `true`, this gets the *independent* variable value on which the bar is centered.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum Y-values) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `false` (ignored otherwise).\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width),\n     */\n    barThickness: PropTypes.number,\n    // barThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]), // todo\n\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object.\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each bar,\n     * or accessor function which returns a class.\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func,\n    /**\n     * `click` event handler callback, called when user clicks the bar.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Conditional if column should display values above/beside each bar.\n     */\n    showLabels: PropTypes.bool,\n    /**\n     * Format to use for the values or accessor that returns the updated value on each bar.\n     */\n    barLabelFormat: PropTypes.func,\n    /**\n     * The distance from the column the text appears in pixels - default is 24.\n     */\n    labelDistance: PropTypes.number,\n    /**\n     * Class name(s) to be included on each bar's <text> element.\n     */\n    labelClassName: PropTypes.string,\n  };\n  static defaultProps = {\n    horizontal: false,\n    barThickness: 8,\n    barClassName: '',\n    barStyle: {},\n  };\n\n  static getDomain(props) {\n    const {\n      xScaleType,\n      yScaleType,\n      horizontal,\n      data,\n      x,\n      xEnd,\n      y,\n      yEnd,\n    } = props;\n\n    // only have to specify range axis domain, other axis uses default domainFromData\n    const rangeAxis = horizontal ? 'x' : 'y';\n    const rangeStartAccessor = horizontal ? makeAccessor2(x) : makeAccessor2(y);\n    const rangeEndAccessor = horizontal\n      ? makeAccessor2(xEnd)\n      : makeAccessor2(yEnd);\n    const rangeScaleType = horizontal ? xScaleType : yScaleType;\n    const rangeDataType = dataTypeFromScaleType(rangeScaleType);\n\n    return {\n      [`${rangeAxis}Domain`]: domainFromRangeData(\n        data,\n        rangeStartAccessor,\n        rangeEndAccessor,\n        rangeDataType,\n      ),\n    };\n  }\n  static getSpacing(props) {\n    const {\n      barThickness,\n      horizontal,\n      x,\n      y,\n      xScale,\n      yScale,\n      data,\n      xDomain,\n      yDomain,\n    } = props;\n    const P = barThickness / 2; // padding\n    const barsDomain = horizontal ? yDomain : xDomain;\n    const barsScale = horizontal ? yScale : xScale;\n    const barsAccessor = horizontal ? makeAccessor2(y) : makeAccessor2(x);\n    const barsDataDomain = domainFromData(data, barsAccessor);\n\n    // find the edges of the tick domain, and map them through the scale function\n    const [domainHead, domainTail] = [first(barsDomain), last(barsDomain)]\n      .map(barsScale)\n      .sort(); // sort the pixel values return by the domain extents\n\n    // find the edges of the data domain, and map them through the scale function\n    const [dataDomainHead, dataDomainTail] = [\n      first(barsDataDomain),\n      last(barsDataDomain),\n    ]\n      .map(barsScale)\n      .sort(); // sort the pixel values return by the domain extents\n\n    // find the necessary spacing (based on bar width) to push the bars completely inside the tick domain\n    const [spacingTail, spacingHead] = [\n      clamp(P - (domainTail - dataDomainTail), 0, P),\n      clamp(P - (dataDomainHead - domainHead), 0, P),\n    ];\n\n    if (horizontal) {\n      return {\n        spacingTop: spacingHead,\n        spacingBottom: spacingTail,\n        spacingLeft: 0,\n        spacingRight: 0,\n      };\n    }\n\n    return {\n      spacingTop: 0,\n      spacingBottom: 0,\n      spacingLeft: spacingHead,\n      spacingRight: spacingTail,\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['barStyle']);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      xScale,\n      yScale,\n      data,\n      horizontal,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      barThickness,\n      barClassName,\n      barStyle,\n      showLabels,\n      barLabelFormat,\n      labelDistance,\n      labelClassName,\n    } = this.props;\n\n    return (\n      <g aria-hidden=\"true\">\n        {data.map((d, i) => {\n          const [onMouseEnter, onMouseMove, onMouseLeave, onClick] = [\n            'onMouseEnterBar',\n            'onMouseMoveBar',\n            'onMouseLeaveBar',\n            'onClick',\n          ].map(eventName => {\n            // partially apply this bar's data point as 2nd callback argument\n            const callback = get(this.props, eventName);\n            return isFunction(callback) ? bindTrailingArgs(callback, d) : null;\n          });\n\n          const barProps = {\n            x: getValue(x, d, i),\n            y: getValue(y, d, i),\n            xEnd: horizontal ? getValue(xEnd, d, i) : undefined,\n            yEnd: horizontal ? undefined : getValue(yEnd, d, i),\n            xScale,\n            yScale,\n            key: `chart-bar-${i}`,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            onClick,\n            thickness: barThickness,\n            showLabel: showLabels,\n            labelFormat: barLabelFormat,\n            labelDistance,\n            labelClassName: getValue(labelClassName, d, i),\n            className: `rct-chart-bar ${getValue(barClassName, d, i) || ''}`,\n            style: getValue(barStyle, d, i),\n          };\n\n          return <Bar {...barProps} />;\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"RangeBarChart.js"}