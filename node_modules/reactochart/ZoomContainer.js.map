{"version":3,"sources":["src/ZoomContainer.js"],"names":["zoomTransformFromProps","props","zoomScale","zoomX","zoomY","zoomIdentity","translate","scale","ZoomContainer","React","Component","constructor","lastZoomTransform","selection","event","args","nextZoomTransform","transform","controlled","state","zoom","on","handleZoom","setState","zoomKey","Math","random","onZoom","svgRef","createRef","componentDidMount","initialZoomTransform","current","call","disableMouseWheelZoom","_updateZoomProps","componentDidUpdate","prevProps","nextProps","hasChangedZoom","propsToUse","extent","scaleExtent","translateExtent","clickDistance","duration","interpolate","constrain","filter","touchable","wheelDelta","Array","isArray","isFinite","render","theZoomTransform","width","height","children","PropTypes","number","func","bool","array","any"],"mappings":"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","sourcesContent":["import { select } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nimport isFunction from 'lodash/isFunction';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n// todo: make sure this correctly handles new props getting passed in, doesn't double bind events\n\nfunction zoomTransformFromProps(props) {\n  const { zoomScale, zoomX, zoomY } = props;\n  return zoomIdentity.translate(zoomX || 0, zoomY || 0).scale(zoomScale || 1);\n}\n\n/**\n * `ZoomContainer` is a wrapper that gives users the ability to zoom in, zoom out and drag its children components.\n */\nexport default class ZoomContainer extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * Zoom callback function, called when zoom changes.\n     * For controlled version of this component, you should update zoomX, zoomY and zoomScale props in this callback.\n     */\n    onZoom: PropTypes.func,\n    /**\n     * Boolean which determines whether the component is \"controlled\" (true) or \"stateful\" (false).\n     * When true, zoom transformation is controlled entirely by the `zoomX`, `zoomY` and `zoomScale` props, which\n     * you are responsible for updating in the `onZoom` callback function.\n     * When false, zoom transformation is handled by internal state, and the `zoomX`, `zoomY` and `zoomScale` props\n     * specify only the initial X, Y and scale transformation of the component.\n     */\n    controlled: PropTypes.bool,\n    /**\n     * Disables wheel-driven zooming (say to not interfere with native scrolling).\n     */\n    disableMouseWheelZoom: PropTypes.bool,\n    /**\n     * The X-coordinate of the zoom transformation (or initial X-coordinate, if `controlled` is false).\n     */\n    zoomX: PropTypes.number,\n    /**\n     * The Y-coordinate of the zoom transformation (or initial Y-coordinate, if `controlled` is false).\n     */\n    zoomY: PropTypes.number,\n    /**\n     * The scaling factor of the zoom transformation (or initial scaling, if `controlled` is false).\n     * 1.0 is normal size, 2.0 is double size, 0.5 is half size.\n     */\n    zoomScale: PropTypes.number,\n    /**\n     * Sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport.\n     * See d3-zoom docs for more information.\n     */\n    extent: PropTypes.array,\n    /**\n     * Sets the scale extent to the specified array of numbers [k0, k1]\n     * where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor.\n     * See d3-zoom docs for more information.\n     */\n    scaleExtent: PropTypes.array,\n    /**\n     * Sets the translate extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the world and [x1, y1] is the bottom-right corner of the world.\n     * See d3-zoom docs for more information.\n     */\n    translateExtent: PropTypes.array,\n    /**\n     * Sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger\n     * a subsequent click event.\n     * See d3-zoom docs for more information.\n     */\n    clickDistance: PropTypes.number,\n    /**\n     * Sets the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds.\n     * See d3-zoom docs for more information.\n     */\n    duration: PropTypes.number,\n    /**\n     * Sets the interpolation factory for zoom transitions to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    interpolate: PropTypes.func,\n    /**\n     * Sets the transform constraint function to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    constrain: PropTypes.func,\n    /**\n     * Sets the zoom event filter to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    filter: PropTypes.func,\n    /**\n     * Sets the touch support detector to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    touchable: PropTypes.func,\n    /**\n     * Sets the wheel delta function to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    wheelDelta: PropTypes.func,\n    children: PropTypes.any,\n  };\n  static defaultProps = {\n    width: 800,\n    height: 600,\n    controlled: false,\n    disableMouseWheelZoom: false,\n    zoomX: 0,\n    zoomY: 0,\n    zoomScale: 1,\n  };\n\n  state = { lastZoomTransform: null, selection: null };\n\n  constructor(props) {\n    super(props);\n    this.svgRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const initialZoomTransform = zoomTransformFromProps(this.props);\n    const selection = select(this.svgRef.current);\n\n    this.zoom = zoom();\n    selection.call(this.zoom);\n\n    if (this.props.disableMouseWheelZoom) {\n      selection.call(this.zoom).on('wheel.zoom', null);\n    } else {\n      selection.call(this.zoom);\n    }\n\n    this.zoom.transform(selection, initialZoomTransform);\n    this._updateZoomProps();\n    this.zoom.on('zoom', this.handleZoom);\n\n    this.setState({\n      selection,\n      lastZoomTransform: initialZoomTransform,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const nextProps = this.props;\n    if (prevProps.controlled) {\n      // if controlled component and zoom props have changed, apply the new zoom props to d3-zoom\n      // (unbind handler first so as not to create infinite callback loop)\n      const hasChangedZoom =\n        nextProps.zoomX !== prevProps.zoomX ||\n        nextProps.zoomY !== prevProps.zoomY ||\n        nextProps.zoomScale !== prevProps.zoomScale;\n\n      if (hasChangedZoom) {\n        this.zoom.on('zoom', null);\n        const nextZoomTransform = zoomTransformFromProps(nextProps);\n        this.zoom.transform(this.state.selection, nextZoomTransform);\n        this.zoom.on('zoom', this.handleZoom);\n\n        // update state.lastZoomTransform so we can revert d3-zoom to this next time it's changed internally\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          lastZoomTransform: nextZoomTransform,\n        });\n      }\n    }\n    this._updateZoomProps(nextProps);\n  }\n\n  handleZoom = (event, ...args) => {\n    const nextZoomTransform = event.transform;\n\n    if (this.props.controlled) {\n      // zoom transform should be controlled by props, but d3-zoom has already applied new transform to this.zoom\n      // (even though props haven't changed), so we must *undo* it by applying lastZoomTransform to this.zoom\n      const { selection, lastZoomTransform } = this.state;\n\n      // unbind zoom event first, so that manually setting transform doesn't trigger handleZoom infinite loop\n      this.zoom.on('zoom', null);\n      this.zoom.transform(selection, lastZoomTransform);\n      this.zoom.on('zoom', this.handleZoom);\n    } else {\n      // *uncontrolled* (stateful) ZoomContainer, we want to keep the transform applied by d3-zoom;\n      // but since the state is inside d3-zoom, we need to update something on this.state to trigger re-render\n      this.setState({ zoomKey: Math.random() });\n    }\n\n    if (this.props.onZoom) this.props.onZoom(nextZoomTransform, ...args);\n  };\n\n  _updateZoomProps(props) {\n    let propsToUse = props;\n\n    if (!propsToUse) propsToUse = this.props;\n    const {\n      extent,\n      scaleExtent,\n      translateExtent,\n      clickDistance,\n      duration,\n      interpolate,\n      constrain,\n      filter,\n      touchable,\n      wheelDelta,\n    } = propsToUse;\n\n    if (Array.isArray(extent)) this.zoom.extent(extent);\n    if (Array.isArray(scaleExtent)) this.zoom.scaleExtent(scaleExtent);\n    if (Array.isArray(translateExtent))\n      this.zoom.translateExtent(translateExtent);\n    if (clickDistance !== null && isFinite(clickDistance))\n      this.zoom.clickDistance(clickDistance);\n    if (duration !== null && isFinite(duration)) this.zoom.duration(duration);\n    if (isFunction(interpolate)) this.zoom.interpolate(interpolate);\n    if (isFunction(constrain)) this.zoom.constrain(constrain);\n    if (isFunction(filter)) this.zoom.filter(filter);\n    if (isFunction(touchable)) this.zoom.touchable(touchable);\n    if (isFunction(wheelDelta)) this.zoom.wheelDelta(wheelDelta);\n  }\n\n  render() {\n    const theZoomTransform =\n      this.svgRef && this.svgRef.current\n        ? zoomTransform(this.svgRef.current)\n        : null;\n\n    return (\n      <svg\n        ref={this.svgRef}\n        width={this.props.width}\n        height={this.props.height}\n      >\n        <g\n          width={this.props.width}\n          height={this.props.height}\n          transform={theZoomTransform}\n        >\n          {this.props.children}\n        </g>\n      </svg>\n    );\n  }\n}\n"],"file":"ZoomContainer.js"}