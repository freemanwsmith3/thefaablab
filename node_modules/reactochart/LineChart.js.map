{"version":3,"sources":["src/LineChart.js"],"names":["LineChart","React","Component","bisectX","x","closestDataIndex","state","props","data","getBisectorState","d","left","getDerivedStateFromProps","nextProps","shouldComponentUpdate","render","xScale","yScale","y","curve","lineStyle","lineClassName","pathStr","i","PropTypes","array","isRequired","CustomPropTypes","valueOrAccessor","object","string","func","curveLinear"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA;;;;AAIe,MAAMA,SAAN,SAAwBC,eAAMC,SAA9B,CAAwC;AAAA;AAAA;;AAAA,mCAsD7C;AACNC,MAAAA,OAAO,EAAE;AADH,KAtD6C;;AAAA,wCA8DxCC,CAAC,IAAI;AAChB,YAAMC,gBAAgB,GAAG,KAAKC,KAAL,CAAWH,OAAX,CAAmB,KAAKI,KAAL,CAAWC,IAA9B,EAAoCJ,CAApC,CAAzB;AACA,aAAO,KAAKG,KAAL,CAAWC,IAAX,CAAgBH,gBAAhB,CAAP;AACD,KAjEoD;AAAA;;AAyCrD,SAAOI,gBAAP,CAAwBF,KAAxB,EAA+B;AAC7B,UAAMJ,OAAO,GAAG,uBAASO,CAAC,IAAI,oBAASH,KAAK,CAACH,CAAf,EAAkBM,CAAlB,CAAd,EAAoCC,IAApD;AACA,WAAO;AAAER,MAAAA;AAAF,KAAP;AACD;;AAED,SAAOS,wBAAP,CAAgCC,SAAhC,EAA2C;AACzC,QAAIA,SAAS,CAACT,CAAd,EAAiB;AACf,aAAOJ,SAAS,CAACS,gBAAV,CAA2BI,SAA3B,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAMDC,EAAAA,qBAAqB,CAACD,SAAD,EAAY;AAC/B,WAAO,CAAC,2BAAa,KAAKN,KAAlB,EAAyBM,SAAzB,EAAoC,CAAC,WAAD,EAAc,eAAd,CAApC,CAAR;AACD;;AAODE,EAAAA,MAAM,GAAG;AACP,UAAM;AACJP,MAAAA,IADI;AAEJQ,MAAAA,MAFI;AAGJC,MAAAA,MAHI;AAIJb,MAAAA,CAJI;AAKJc,MAAAA,CALI;AAMJC,MAAAA,KANI;AAOJC,MAAAA,SAPI;AAQJC,MAAAA;AARI,QASF,KAAKd,KATT;AAWA,UAAMe,OAAO,GAAG,qBACbH,KADa,CACPA,KADO,EAEbf,CAFa,CAEX,CAACM,CAAD,EAAIa,CAAJ,KAAUP,MAAM,CAAC,oBAASZ,CAAT,EAAYM,CAAZ,EAAea,CAAf,CAAD,CAFL,EAGbL,CAHa,CAGX,CAACR,CAAD,EAAIa,CAAJ,KAAUN,MAAM,CAAC,oBAASC,CAAT,EAAYR,CAAZ,EAAea,CAAf,CAAD,CAHL,EAG0Bf,IAH1B,CAAhB;AAKA,wBACE;AAAG,MAAA,SAAS,EAAG,kBAAiBa,aAAc,EAA9C;AAAiD,qBAAY;AAA7D,oBACE;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,CAAC,EAAEC,OAAnC;AAA4C,MAAA,KAAK,EAAEF;AAAnD,MADF,CADF;AAKD;;AAzFoD;;;;gBAAlCpB,S,eACA;AACjB;;;AAGAQ,EAAAA,IAAI,EAAEgB,mBAAUC,KAAV,CAAgBC,UAJL;;AAKjB;;;AAGAtB,EAAAA,CAAC,EAAEuB,eAAe,CAACC,eARF;;AASjB;;;AAGAV,EAAAA,CAAC,EAAES,eAAe,CAACC,eAZF;;AAajB;;;AAGAR,EAAAA,SAAS,EAAEI,mBAAUK,MAhBJ;;AAiBjB;;;AAGAR,EAAAA,aAAa,EAAEG,mBAAUM,MApBR;;AAqBjB;;;AAGAd,EAAAA,MAAM,EAAEQ,mBAAUO,IAxBD;;AAyBjB;;;AAGAd,EAAAA,MAAM,EAAEO,mBAAUO,IA5BD;;AA6BjB;;;AAGAZ,EAAAA,KAAK,EAAEK,mBAAUO;AAhCA,C;;gBADA/B,S,kBAmCG;AACpBoB,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,aAAa,EAAE,EAFK;AAGpBF,EAAAA,KAAK,EAAEa;AAHa,C","sourcesContent":["import { line, curveLinear } from 'd3-shape';\nimport { bisector } from 'd3-array';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport { getValue } from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\n/**\n * `LineChart` displays a series of points connected by straight line segments.\n * Each `LineChart` renders one line.\n */\nexport default class LineChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for line X values, called once per datum, or a single value to be used for the entire line.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for line Y values, called once per datum, or a single value to be used for the entire line.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Inline style object to be applied to the line path.\n     */\n    lineStyle: PropTypes.object,\n    /**\n     * Class attribute to be applied to the line path.\n     */\n    lineClassName: PropTypes.string,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * D3 curve for path generation\n     */\n    curve: PropTypes.func,\n  };\n  static defaultProps = {\n    lineStyle: {},\n    lineClassName: '',\n    curve: curveLinear,\n  };\n\n  static getBisectorState(props) {\n    const bisectX = bisector(d => getValue(props.x, d)).left;\n    return { bisectX };\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.x) {\n      return LineChart.getBisectorState(nextProps);\n    }\n\n    return null;\n  }\n\n  state = {\n    bisectX: null,\n  };\n\n  shouldComponentUpdate(nextProps) {\n    return !xyPropsEqual(this.props, nextProps, ['lineStyle', 'lineClassName']);\n  }\n\n  getHovered = x => {\n    const closestDataIndex = this.state.bisectX(this.props.data, x);\n    return this.props.data[closestDataIndex];\n  };\n\n  render() {\n    const {\n      data,\n      xScale,\n      yScale,\n      x,\n      y,\n      curve,\n      lineStyle,\n      lineClassName,\n    } = this.props;\n\n    const pathStr = line()\n      .curve(curve)\n      .x((d, i) => xScale(getValue(x, d, i)))\n      .y((d, i) => yScale(getValue(y, d, i)))(data);\n\n    return (\n      <g className={`rct-line-chart ${lineClassName}`} aria-hidden=\"true\">\n        <path className=\"rct-line-path\" d={pathStr} style={lineStyle} />\n      </g>\n    );\n  }\n}\n"],"file":"LineChart.js"}