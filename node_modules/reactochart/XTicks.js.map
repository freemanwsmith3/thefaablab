{"version":3,"sources":["src/XTicks.js"],"names":["XTicks","React","Component","getTickDomain","props","xScale","propsWithDefaults","defaultProps","xTickDomain","getMargin","tickLength","position","placement","zeroMargin","marginTop","marginBottom","marginLeft","marginRight","render","height","tickCount","tickStyle","tickClassName","spacingTop","spacingBottom","ticks","className","transform","map","tick","i","x1","y2","x2","y1","style","key","PropTypes","number","func","oneOf","array","object","string","nice","bool"],"mappings":"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","sourcesContent":["import defaults from 'lodash/defaults';\nimport capitalize from 'lodash/capitalize';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getScaleTicks, getTickDomain } from './utils/Scale';\n\nexport default class XTicks extends React.Component {\n  static propTypes = {\n    /**\n     * Height of chart - provided by XYPlot.\n     */\n    height: PropTypes.number,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * Position of x ticks. Accepted options are \"bottom\" or \"top\".\n     */\n    position: PropTypes.oneOf(['bottom', 'top']),\n    /**\n     * Placement of ticks in regards to the x axis. Accepted options are \"above\" or \"below\".\n     */\n    placement: PropTypes.oneOf(['above', 'below']),\n    /**\n     * Custom ticks to display.\n     */\n    ticks: PropTypes.array,\n    /**\n     * Number of ticks on axis.\n     */\n    tickCount: PropTypes.number,\n    tickLength: PropTypes.number,\n    /**\n     * Inline style object applied to each tick.\n     */\n    tickStyle: PropTypes.object,\n    /**\n     * Class attribute to be applied to each tick.\n     */\n    tickClassName: PropTypes.string,\n    /**\n     * Spacing - provided by XYPlot and used to determine the placement of the ticks given spacingTop.\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Spacing - provided by XYPlot and used to determine the placement of the ticks given spacingBottom.\n     */\n    spacingBottom: PropTypes.number,\n    /**\n     * Round ticks to capture extent of given x domain from XYPlot.\n     */\n    nice: PropTypes.bool,\n  };\n  static defaultProps = {\n    position: 'bottom',\n    nice: true,\n    tickLength: 5,\n    tickStyle: {},\n    tickClassName: '',\n  };\n\n  static getTickDomain(props) {\n    if (!props.xScale) return;\n    const propsWithDefaults = defaults({}, props, XTicks.defaultProps);\n    return {\n      xTickDomain: getTickDomain(propsWithDefaults.xScale, propsWithDefaults),\n    };\n  }\n\n  static getMargin(props) {\n    const { tickLength, position } = defaults({}, props, XTicks.defaultProps);\n    const placement =\n      props.placement || (position === 'top' ? 'above' : 'below');\n    const zeroMargin = {\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0,\n    };\n\n    if (\n      (position === 'bottom' && placement === 'above') ||\n      (position === 'top' && placement === 'below')\n    )\n      return zeroMargin;\n\n    return defaults(\n      { [`margin${capitalize(position)}`]: tickLength || 0 },\n      zeroMargin,\n    );\n  }\n\n  render() {\n    const {\n      height,\n      xScale,\n      tickCount,\n      position,\n      tickLength,\n      tickStyle,\n      tickClassName,\n      spacingTop,\n      spacingBottom,\n    } = this.props;\n\n    const placement =\n      this.props.placement || (position === 'top' ? 'above' : 'below');\n    const ticks = this.props.ticks || getScaleTicks(xScale, null, tickCount);\n    const className = `rct-chart-tick rct-chart-tick-x ${tickClassName || ''}`;\n    const transform =\n      position === 'bottom'\n        ? `translate(0, ${height + (spacingBottom || 0)})`\n        : `translate(0, ${-spacingTop || 0})`;\n\n    return (\n      <g className=\"rct-chart-ticks-x\" transform={transform} aria-hidden=\"true\">\n        {ticks.map((tick, i) => {\n          const x1 = xScale(tick);\n          const y2 = placement === 'above' ? -tickLength : tickLength;\n\n          return (\n            <line\n              {...{\n                x1,\n                x2: x1,\n                y1: 0,\n                y2,\n                className,\n                style: tickStyle,\n                key: `tick-${i}`,\n              }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"XTicks.js"}