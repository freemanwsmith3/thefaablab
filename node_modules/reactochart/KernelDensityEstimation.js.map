{"version":3,"sources":["src/KernelDensityEstimation.js"],"names":["KernelDensityEstimation","React","Component","kdeData","getDomain","yDomain","shouldComponentUpdate","nextProps","shouldUpdate","props","getDerivedStateFromProps","prevState","getKdeData","data","bandwidth","sampleCount","xScale","width","kernel","epanechnikovKernel","samples","ticks","Math","ceil","kernelDensityEstimator","render","state","d","PropTypes","array","isRequired","number","lineStyle","object","lineClassName","string","x","CustomPropTypes","valueOrAccessor","func","yScale","sample","map","v","scale","u","abs"],"mappings":"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","sourcesContent":["import { mean } from 'd3-array';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport LineChart from './LineChart.js';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\n/**\n * Kernel Density Estimation is still undergoing experimental changes!\n * We do not consider this chart to be production ready but\n * encourage you to try it out and contribute to any of its missing features.\n */\nclass KernelDensityEstimation extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data objects.\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Kernel bandwidth for kernel density estimator.\n     * High bandwidth => oversmoothing & underfitting; low bandwidth => undersmoothing & overfitting\n     */\n    bandwidth: PropTypes.number,\n    /**\n     * Number of samples to take from the KDE,\n     * ie. the resolution/smoothness of the KDE line - more samples => higher resolution, smooth line.\n     * Defaults to null, which causes it to be auto-determined based on width.\n     */\n    sampleCount: PropTypes.number,\n    /**\n     * Inline style object to be applied to the line path.\n     */\n    lineStyle: PropTypes.object,\n    /**\n     * Class attribute to be applied to the line path.\n     */\n    lineClassName: PropTypes.string,\n    /**\n     * Accessor function for bar X values, called once per bar (datum).\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n  };\n  static defaultProps = {\n    bandwidth: 0.5,\n    sampleCount: null, // null = auto-determined based on width\n    lineClassName: '',\n    lineStyle: {},\n  };\n\n  state = {\n    kdeData: null,\n  };\n\n  static getDomain() {\n    // todo implement real static getDomain method\n    return {\n      yDomain: [0, 200],\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, []);\n    return shouldUpdate;\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const kdeData = KernelDensityEstimation.getKdeData(nextProps);\n    return { kdeData };\n  }\n\n  static getKdeData(props) {\n    const { data, bandwidth, sampleCount, xScale, width } = props;\n    const kernel = epanechnikovKernel(bandwidth);\n    const samples = xScale.ticks(sampleCount || Math.ceil(width / 2));\n    return kernelDensityEstimator(kernel, samples)(data);\n  }\n\n  render() {\n    const { kdeData } = this.state;\n\n    return (\n      <LineChart\n        {...this.props}\n        data={kdeData}\n        x={d => d[0]}\n        y={d => d[1] * 500}\n      />\n    );\n  }\n}\n\nfunction kernelDensityEstimator(kernel, x) {\n  return function(sample) {\n    return x.map(function(x) {\n      return [\n        x,\n        mean(sample, function(v) {\n          return kernel(x - v);\n        }),\n      ];\n    });\n  };\n}\n\nfunction epanechnikovKernel(scale) {\n  return function(u) {\n    return Math.abs((u /= scale)) <= 1 ? (0.75 * (1 - u * u)) / scale : 0;\n  };\n}\n\nexport default KernelDensityEstimation;\n"],"file":"KernelDensityEstimation.js"}