{"version":3,"sources":["src/AreaChart.js"],"names":["AreaChart","React","Component","getDomain","props","data","x","y","yEnd","accessors","yDomain","shouldComponentUpdate","nextProps","shouldUpdate","render","xScale","yScale","isDifference","pathStyle","pathStylePositive","pathStyleNegative","shouldShowGaps","pathClassName","isDefined","curve","areaGenerator","defined","d","i","y0","y1","areaPathStr","height","clipBelowPathStr","clipAbovePathStr","chartId","clipAboveId","clipBelowId","pathStyleAbove","pathStyleBelow","PropTypes","array","isRequired","CustomPropTypes","valueOrAccessor","string","object","bool","func","xScaleType","yScaleType","number"],"mappings":"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","sourcesContent":["import { area } from 'd3-shape';\nimport isUndefined from 'lodash/isUndefined';\nimport uniqueId from 'lodash/uniqueId';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport { combineDomains, domainFromData, makeAccessor2 } from './utils/Data';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\n/**\n * `AreaChart` represents a simple bivariate area chart,\n * a filled path drawn between two lines (datasets).\n */\n\n// todo horizontal prop, for filling area horizontally?\n// todo support ordinal (like days of the week) data?\n// todo build StackedAreaChart that composes multiple AreaCharts\n\nexport default class AreaChart extends React.Component {\n  static propTypes = {\n    /**\n     * The array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for area X values, called once per datum,\n     * or a single X value to be used for the entire line.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for area's starting (minimum) Y values, called once per datum,\n     * or a single Y value to be used for the entire line.\n     * Should return the minimum of the Y range spanned by the area at this point.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for area's ending (maximum) Y values, called once per datum,\n     * or a single Y value to be used for the entire line.\n     * Should return the maximum of the Y range spanned by the area at this point.\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Class attribute to be applied to area path element.\n     */\n    // TODO: update to allow function to be passed\n    pathClassName: PropTypes.string,\n    /**\n     * Inline style object to be applied to area path element.\n     */\n    // TODO: update to allow function to be passed\n    pathStyle: PropTypes.object,\n    /**\n     * If isDifference is true, AreaChart generates a \"difference chart\" with two area paths instead of one:\n     * one path which shows when YEnd > Y, and one vice versa, allowing them to be styled differently (eg red/green).\n     */\n    isDifference: PropTypes.bool,\n    /**\n     * When isDifference is true, pathStylePositive can be passed to style the\n     * positive area difference.\n     * Ignored if isDifference is false.\n     */\n    pathStylePositive: PropTypes.object,\n    /**\n     * When isDifference is true, pathStyleNegative can be passed to style the\n     * negative area difference.\n     * Ignored if isDifference is false.\n     */\n    pathStyleNegative: PropTypes.object,\n    /**\n     * If true, will show gaps in the shaded area for data where props.isDefined(datum) returns false.\n     */\n    shouldShowGaps: PropTypes.bool,\n    /**\n     * If shouldShowGaps is true, isDefined function describes when a datum\n     * should be considered \"defined\" vs. when to show gap by default.\n     * Shows gap if either y or yEnd are undefined.\n     */\n    isDefined: PropTypes.func,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * Type of X scale - provided by XYPlot.\n     */\n    xScaleType: PropTypes.string,\n    /**\n     * Type of Y scale - provided by XYPlot.\n     */\n    yScaleType: PropTypes.string,\n    /**\n     * Height of chart - provided by XYPlot.\n     */\n    height: PropTypes.number,\n    /**\n     * D3 curve for path generation.\n     */\n    curve: PropTypes.func,\n  };\n\n  static defaultProps = {\n    shouldShowGaps: true,\n    isDefined: (d, i, accessors) => {\n      return (\n        !isUndefined(accessors.y(d, i)) && !isUndefined(accessors.yEnd(d, i))\n      );\n    },\n    pathClassName: '',\n    pathStyle: {},\n  };\n\n  static getDomain(props) {\n    // custom Y domain - the total (union) extent of getY and getYEnd combined\n    const { data, x, y, yEnd } = props;\n    const accessors = {\n      x: makeAccessor2(x),\n      y: makeAccessor2(y),\n      yEnd: makeAccessor2(yEnd),\n    };\n    return {\n      yDomain: combineDomains([\n        domainFromData(data, accessors.y),\n        domainFromData(data, accessors.yEnd),\n      ]),\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\n      'pathStyle',\n      'pathStylePositive',\n      'pathStyleNegative',\n    ]);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      data,\n      x,\n      y,\n      yEnd,\n      xScale,\n      yScale,\n      isDifference,\n      pathStyle,\n      pathStylePositive,\n      pathStyleNegative,\n      shouldShowGaps,\n      pathClassName,\n      isDefined,\n      curve,\n    } = this.props;\n    const accessors = {\n      x: makeAccessor2(x),\n      y: makeAccessor2(y),\n      yEnd: makeAccessor2(yEnd),\n    };\n\n    // create d3 area path generator\n    const areaGenerator = area();\n\n    // if gaps in data should be shown, use `props.isDefined` function as the `defined` param for d3's area generator;\n    // but wrap it & pass in accessors as well, so that the function can easily access the relevant data values\n    if (shouldShowGaps) {\n      areaGenerator.defined((d, i) => isDefined(d, i, accessors));\n    }\n\n    areaGenerator\n      .x((d, i) => xScale(accessors.x(d, i)))\n      .y0((d, i) => yScale(accessors.y(d, i)))\n      .y1((d, i) => yScale(accessors.yEnd(d, i)));\n\n    if (curve) {\n      areaGenerator.curve(curve);\n    }\n\n    const areaPathStr = areaGenerator(data);\n\n    if (isDifference) {\n      // difference chart - create 2 clip paths, one which clips to only show path where YEnd > Y, and other vice versa\n      // don't document height prop from XYPlot\n      /* eslint-disable react/prop-types */\n      areaGenerator.y0(this.props.height);\n      /* eslint-enable react/prop-types */\n      const clipBelowPathStr = areaGenerator(data);\n      areaGenerator.y0(0);\n      const clipAbovePathStr = areaGenerator(data);\n\n      // make sure we have a unique ID for this chart, so clip path IDs don't affect other charts\n      const chartId = uniqueId();\n      const clipAboveId = `clip-above-area-${chartId}`;\n      const clipBelowId = `clip-below-area-${chartId}`;\n      const pathStyleAbove = pathStylePositive || pathStyle || {};\n      const pathStyleBelow = pathStyleNegative || pathStyle || {};\n\n      return (\n        <g className=\"rct-area-chart--difference\">\n          <clipPath id={clipAboveId}>\n            <path className=\"rct-area-chart-path\" d={clipAbovePathStr} />\n          </clipPath>\n          <clipPath id={clipBelowId}>\n            <path className=\"rct-area-chart-path\" d={clipBelowPathStr} />\n          </clipPath>\n          <path\n            className={`rct-area-chart-path ${pathClassName}`}\n            d={areaPathStr}\n            clipPath={`url(#${clipAboveId})`}\n            style={pathStyleAbove}\n          />\n          <path\n            className={`rct-area-chart-path ${pathClassName}`}\n            d={areaPathStr}\n            clipPath={`url(#${clipBelowId})`}\n            style={pathStyleBelow}\n          />\n        </g>\n      );\n    }\n\n    return (\n      <g className=\"rct-area-chart\" aria-hidden=\"true\">\n        <path\n          className={`rct-area-chart-path ${pathClassName}`}\n          d={areaPathStr}\n          style={pathStyle || {}}\n        />\n      </g>\n    );\n  }\n}\n"],"file":"AreaChart.js"}