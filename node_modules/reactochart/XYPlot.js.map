{"version":3,"sources":["src/XYPlot.js"],"names":["getMouseOptions","event","xScale","yScale","height","width","marginTop","marginBottom","marginLeft","marginRight","chartBB","currentTarget","getBoundingClientRect","outerX","Math","round","clientX","left","outerY","clientY","top","innerX","innerY","chartSize","bottom","right","xScaleType","yScaleType","xValue","invert","yValue","XYPlot","React","Component","callbackKey","callback","props","options","onXYMouseEvent","bind","render","spacingTop","spacingBottom","spacingLeft","spacingRight","xyPlotContainerStyle","xyPlotStyle","xyPlotClassName","panelSize","handlerNames","handlers","map","handlerName","scales","omittedProps","propsForChildren","className","style","Children","children","child","cloneElement","PropTypes","number","xDomain","array","yDomain","string","invertXScale","bool","invertYScale","includeXZero","includeYZero","onMouseMove","func","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onClick","object","any","XYPlotResolved"],"mappings":"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","sourcesContent":["import inRange from 'lodash/inRange';\nimport isFunction from 'lodash/isFunction';\nimport fromPairs from 'lodash/fromPairs';\nimport omit from 'lodash/omit';\nimport isNull from 'lodash/isNull';\nimport isUndefined from 'lodash/isUndefined';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { methodIfFuncProp } from './util';\nimport { innerSize } from './utils/Margin';\nimport resolveXYScales from './utils/resolveXYScales';\nimport { inferScaleType, invertPointScale } from './utils/Scale';\n\nfunction getMouseOptions(\n  event,\n  {\n    xScale,\n    yScale,\n    height,\n    width,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight,\n  },\n) {\n  const chartBB = event.currentTarget.getBoundingClientRect();\n  const outerX = Math.round(event.clientX - chartBB.left);\n  const outerY = Math.round(event.clientY - chartBB.top);\n  const innerX = outerX - (marginLeft || 0);\n  const innerY = outerY - (marginTop || 0);\n  const chartSize = innerSize(\n    { width, height },\n    {\n      top: marginTop,\n      bottom: marginBottom,\n      left: marginLeft,\n      right: marginRight,\n    },\n  );\n  const xScaleType = inferScaleType(xScale);\n  const yScaleType = inferScaleType(yScale);\n\n  const xValue = !inRange(innerX, 0, chartSize.width)\n    ? null\n    : xScaleType === 'ordinal'\n    ? invertPointScale(xScale, innerX)\n    : xScale.invert(innerX);\n\n  const yValue = !inRange(innerY, 0, chartSize.height)\n    ? null\n    : yScaleType === 'ordinal'\n    ? invertPointScale(yScale, innerY)\n    : yScale.invert(innerY);\n\n  return {\n    event,\n    outerX,\n    outerY,\n    innerX,\n    innerY,\n    xValue,\n    yValue,\n    xScale,\n    yScale,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight,\n  };\n}\n\nclass XYPlot extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * The X domain of the data as an array.\n     * For numerical scales, this is represented as [min, max] of the data;\n     * for ordinal/categorical scales it is an array of known values ie. ['a', 'b', 'c'].\n     * Automatically determined from data if not passed.\n     */\n    xDomain: PropTypes.array,\n    /**\n     * The Y domain of the data as an array.\n     * For numerical scales, this is represented as [min, max] of the data;\n     * for ordinal/categorical scales it is an array of known values ie. ['a', 'b', 'c'].\n     * Automatically determined from data if not passed.\n     */\n    yDomain: PropTypes.array,\n\n    xScaleType: PropTypes.string,\n    yScaleType: PropTypes.string,\n\n    /**\n     * Whether or not to invert the x scale\n     */\n    invertXScale: PropTypes.bool,\n    /**\n     * Whether or not to invert the y scale\n     */\n    invertYScale: PropTypes.bool,\n\n    /**\n     * Whether or not to coerce 0 into your x domain\n     */\n    includeXZero: PropTypes.bool,\n    /**\n     * Whether or not to coerce 0 into your y domain\n     */\n    includeYZero: PropTypes.bool,\n\n    /**\n     * Internal top margin, in pixels.\n     */\n    marginTop: PropTypes.number,\n    /**\n     * Internal bottom margin, in pixels.\n     */\n    marginBottom: PropTypes.number,\n    /**\n     * Internal left margin, in pixels.\n     */\n    marginLeft: PropTypes.number,\n    /**\n     * Internal right margin, in pixels.\n     */\n    marginRight: PropTypes.number,\n    /**\n     * Internal top spacing of XYPlot, in pixels.\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Internal bottom spacing of XYPlot, in pixels.\n     */\n    spacingBottom: PropTypes.number,\n    /**\n     * Internal left spacing of XYPlot, in pixels.\n     */\n    spacingLeft: PropTypes.number,\n    /**\n     * Internal right spacing of XYPlot, in pixels.\n     */\n    spacingRight: PropTypes.number,\n\n    // todo implement padding (helper for spacing)\n    // paddingTop: PropTypes.number,\n    // paddingBottom: PropTypes.number,\n    // paddingLeft: PropTypes.number,\n    // paddingRight: PropTypes.number,\n\n    onMouseMove: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseDown: PropTypes.func,\n    onMouseUp: PropTypes.func,\n    onClick: PropTypes.func,\n\n    /**\n     * Inline style object to be applied to the parent SVG element that wraps XYPlot.\n     */\n    xyPlotContainerStyle: PropTypes.object,\n    /**\n     * Inline style object to be applied to the plot.\n     * This is the inner rect DOM element where the graphs are rendered within the axes.\n     */\n    xyPlotStyle: PropTypes.object,\n    /**\n     * Class attribute applied to xy plot\n     */\n    xyPlotClassName: PropTypes.string,\n    /**\n     * Scale determined by our resolveXYScales higher order component.\n     * Override this prop if you'd like to pass in your own d3 scale.\n     */\n    xScale: PropTypes.func,\n    /**\n     * Scale determined by our resolveXYScales higher order component.\n     * Override this prop if you'd like to pass in your own d3 scale.\n     */\n    yScale: PropTypes.func,\n    children: PropTypes.any,\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    invertXScale: false,\n    invertYScale: false,\n    includeXZero: false,\n    includeYZero: false,\n    xyPlotContainerStyle: {},\n    xyPlotStyle: {},\n    xyPlotClassName: '',\n  };\n\n  onXYMouseEvent = (callbackKey, event) => {\n    const callback = this.props[callbackKey];\n    if (!isFunction(callback)) return;\n    const options = getMouseOptions(event, this.props);\n    callback(options);\n  };\n\n  onMouseMove = this.onXYMouseEvent.bind(this, 'onMouseMove');\n  onMouseDown = this.onXYMouseEvent.bind(this, 'onMouseDown');\n  onMouseUp = this.onXYMouseEvent.bind(this, 'onMouseUp');\n  onClick = this.onXYMouseEvent.bind(this, 'onClick');\n  onMouseEnter = this.onXYMouseEvent.bind(this, 'onMouseEnter');\n  onMouseLeave = this.onXYMouseEvent.bind(this, 'onMouseLeave');\n\n  render() {\n    const {\n      width,\n      height,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight,\n      xyPlotContainerStyle,\n      xyPlotStyle,\n      xyPlotClassName,\n      // Passed in as prop from resolveXYScales\n      xScale,\n      yScale,\n    } = this.props;\n\n    // subtract margin + spacing from width/height to obtain inner width/height of panel & chart area\n    // panelSize is the area including chart + spacing but NOT margin\n    // chartSize is smaller, chart *only*, not including margin or spacing\n    const panelSize = innerSize(\n      { width, height },\n      {\n        top: marginTop,\n        bottom: marginBottom,\n        left: marginLeft,\n        right: marginRight,\n      },\n    );\n    const chartSize = innerSize(panelSize, {\n      top: spacingTop,\n      bottom: spacingBottom,\n      left: spacingLeft,\n      right: spacingRight,\n    });\n\n    const handlerNames = [\n      'onMouseMove',\n      'onMouseEnter',\n      'onMouseLeave',\n      'onMouseDown',\n      'onMouseUp',\n      'onClick',\n    ];\n    const handlers = fromPairs(\n      handlerNames.map(handlerName => [\n        handlerName,\n        methodIfFuncProp(handlerName, this.props, this),\n      ]),\n    );\n    const scales = {\n      xScale,\n      yScale,\n    };\n\n    // Props that shouldn't be sent down to children\n    // because they're either unnecessary or we don't want them to\n    // override any children props\n    const omittedProps = [\n      ...handlerNames,\n      'xyPlotContainerStyle',\n      'xyPlotStyle',\n      'xyPlotClassName',\n    ];\n\n    const propsForChildren = {\n      ...omit(this.props, omittedProps),\n      ...chartSize,\n      ...scales,\n    };\n\n    const className = `rct-xy-plot ${xyPlotClassName}`;\n\n    return (\n      <svg\n        {...{ width, height, className, style: xyPlotContainerStyle }}\n        {...handlers}\n      >\n        <rect\n          className=\"rct-chart-background\"\n          {...{ width, height }}\n          aria-hidden=\"true\"\n        />\n        <g\n          transform={`translate(${marginLeft + spacingLeft}, ${marginTop +\n            spacingTop})`}\n          className=\"rct-chart-inner\"\n        >\n          <rect\n            transform={`translate(${-spacingLeft}, ${-spacingTop})`}\n            className=\"rct-plot-background\"\n            style={xyPlotStyle}\n            aria-hidden=\"true\"\n            {...panelSize}\n          />\n          {React.Children.map(this.props.children, child => {\n            return isNull(child) || isUndefined(child)\n              ? null\n              : React.cloneElement(child, propsForChildren);\n          })}\n        </g>\n      </svg>\n    );\n  }\n}\n\nconst XYPlotResolved = resolveXYScales(XYPlot);\n\nexport default XYPlotResolved;\n"],"file":"XYPlot.js"}