{"version":3,"sources":["src/TreeMapNode.js"],"names":["TreeMapNode","props","node","getLabel","nodeStyle","labelStyle","minLabelWidth","minLabelHeight","NodeLabelComponent","parentNames","depth","parent","x0","y0","x1","y1","parentName","nodeGroupClass","indexOf","className","style","position","width","height","top","left","transition","customStyle","Object","assign","handlers","reduce","acc","eventName","handler","bind","propTypes","PropTypes","shape","object","children","array","value","number","x","y","dx","dy","oneOfType","func","CustomPropTypes","getter","arrayOf","string","defaultProps"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport kebabCase from 'lodash/kebabCase';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\n\nconst TreeMapNode = props => {\n  const {\n    node,\n    getLabel,\n    nodeStyle,\n    labelStyle,\n    minLabelWidth,\n    minLabelHeight,\n    NodeLabelComponent,\n    parentNames,\n  } = props;\n  const { depth, parent, x0, y0, x1, y1 } = node;\n\n  const parentName = get(parent, 'data.name');\n  const nodeGroupClass = parent\n    ? `node-group-${kebabCase(parentName)} node-group-i-${parentNames.indexOf(\n        parentName,\n      )}`\n    : '';\n  const className = `rct-tree-map-node node-depth-${depth} ${nodeGroupClass}`;\n\n  const style = {\n    position: 'absolute',\n    width: x1 - x0,\n    height: y1 - y0,\n    top: y0,\n    left: x0,\n    transition: 'all .2s',\n  };\n  const customStyle = isFunction(nodeStyle)\n    ? nodeStyle(node)\n    : isObject(nodeStyle)\n    ? nodeStyle\n    : {};\n  Object.assign(style, customStyle);\n\n  const handlers = [\n    'onClick',\n    'onMouseEnter',\n    'onMouseLeave',\n    'onMouseMove',\n  ].reduce((acc, eventName) => {\n    const handler = props[`${eventName}Node`];\n    if (handler) acc[eventName] = handler.bind(null, node);\n    return acc;\n  }, {});\n\n  return (\n    <div {...{ className, style }} {...handlers}>\n      {x1 - x0 > minLabelWidth && y1 - y0 > minLabelHeight ? ( // show label if node is big enough\n        <NodeLabelComponent {...{ node, getLabel, labelStyle }} />\n      ) : null}\n    </div>\n  );\n};\n\nTreeMapNode.propTypes = {\n  node: PropTypes.shape({\n    parent: PropTypes.object,\n    children: PropTypes.array,\n    value: PropTypes.number,\n    depth: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    dx: PropTypes.number,\n    dy: PropTypes.number,\n    x0: PropTypes.number,\n    y0: PropTypes.number,\n    x1: PropTypes.number,\n    y1: PropTypes.number,\n  }),\n  nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  minLabelWidth: PropTypes.number,\n  minLabelHeight: PropTypes.number,\n  getLabel: CustomPropTypes.getter,\n  labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  NodeLabelComponent: PropTypes.func,\n  parentNames: PropTypes.arrayOf(PropTypes.string),\n};\n\nTreeMapNode.defaultProps = {\n  minLabelWidth: 0,\n  minLabelHeight: 0,\n};\n\nexport default TreeMapNode;\n"],"file":"TreeMapNode.js"}