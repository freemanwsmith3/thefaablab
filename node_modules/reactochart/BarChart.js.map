{"version":3,"sources":["src/BarChart.js"],"names":["makeRangeBarChartProps","barChartProps","horizontal","x","y","xEnd","undefined","yEnd","BarChart","React","Component","getDomain","props","RangeBarChart","getSpacing","shouldComponentUpdate","nextProps","shouldUpdate","render","rangeBarChartProps","data","PropTypes","array","isRequired","CustomPropTypes","valueOrAccessor","xScale","func","yScale","bool","barThickness","number","barStyle","oneOfType","object","barClassName","string","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar","onClick"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,SAASA,sBAAT,CAAgCC,aAAhC,EAA+C;AAC7C;AACA;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,CAAd;AAAiBC,IAAAA;AAAjB,MAAuBH,aAA7B;AAEA,yCACKA,aADL;AAEEE,IAAAA,CAAC,EAAED,UAAU,GAAG,CAAH,GAAOC,CAFtB;AAGEC,IAAAA,CAAC,EAAEF,UAAU,GAAGE,CAAH,GAAO,CAHtB;AAIEC,IAAAA,IAAI,EAAEH,UAAU,GAAGC,CAAH,GAAOG,SAJzB;AAKEC,IAAAA,IAAI,EAAEL,UAAU,GAAGI,SAAH,GAAeF;AALjC;AAOD;AAED;;;;;;;;;;AASe,MAAMI,QAAN,SAAuBC,eAAMC,SAA7B,CAAuC;AAsEpD;AACA,SAAOC,SAAP,CAAiBC,KAAjB,EAAwB;AACtB,WAAOC,uBAAcF,SAAd,CAAwBX,sBAAsB,CAACY,KAAD,CAA9C,CAAP;AACD;;AACD,SAAOE,UAAP,CAAkBF,KAAlB,EAAyB;AACvB,WAAOC,uBAAcC,UAAd,CAAyBd,sBAAsB,CAACY,KAAD,CAA/C,CAAP;AACD;;AAEDG,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,UAAMC,YAAY,GAAG,CAAC,2BAAa,KAAKL,KAAlB,EAAyBI,SAAzB,EAAoC,CAAC,UAAD,CAApC,CAAtB;AACA,WAAOC,YAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AAEA,UAAMC,kBAAkB,GAAGnB,sBAAsB,CAAC,KAAKY,KAAN,CAAjD;AAEA,wBAAO,6BAAC,sBAAD,EAAmBO,kBAAnB,CAAP;AACD;;AAzFmD;;;;gBAAjCX,Q,eACA;AACjB;;;AAGAY,EAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC,UAJL;;AAKjB;;;;;AAKApB,EAAAA,CAAC,EAAEqB,eAAe,CAACC,eAVF;;AAWjB;;;;;AAKArB,EAAAA,CAAC,EAAEoB,eAAe,CAACC,eAhBF;;AAiBjB;;;AAGAC,EAAAA,MAAM,EAAEL,mBAAUM,IApBD;;AAqBjB;;;AAGAC,EAAAA,MAAM,EAAEP,mBAAUM,IAxBD;;AAyBjB;;;;AAIAzB,EAAAA,UAAU,EAAEmB,mBAAUQ,IA7BL;;AA8BjB;;;AAGAC,EAAAA,YAAY,EAAET,mBAAUU,MAjCP;;AAkCjB;;;;AAIAC,EAAAA,QAAQ,EAAEX,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUa,MAAX,EAAmBb,mBAAUM,IAA7B,CAApB,CAtCO;;AAuCjB;;;;AAIAQ,EAAAA,YAAY,EAAEd,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUe,MAAX,EAAmBf,mBAAUM,IAA7B,CAApB,CA3CG;;AA4CjB;;;AAGAU,EAAAA,cAAc,EAAEhB,mBAAUM,IA/CT;;AAgDjB;;;AAGAW,EAAAA,eAAe,EAAEjB,mBAAUM,IAnDV;;AAoDjB;;;AAGAY,EAAAA,eAAe,EAAElB,mBAAUM,IAvDV;;AAwDjB;;;AAGAa,EAAAA,OAAO,EAAEnB,mBAAUM;AA3DF,C;;gBADAnB,Q,kBA8DG;AACpBY,EAAAA,IAAI,EAAE,EADc;AAEpBlB,EAAAA,UAAU,EAAE,KAFQ;AAGpB4B,EAAAA,YAAY,EAAE,CAHM;AAIpBK,EAAAA,YAAY,EAAE,EAJM;AAKpBH,EAAAA,QAAQ,EAAE;AALU,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport RangeBarChart from './RangeBarChart';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\nfunction makeRangeBarChartProps(barChartProps) {\n  // this component is a simple wrapper around RangeBarChart,\n  // passing accessors to make range bars which span from zero to the data value\n  const { horizontal, x, y } = barChartProps;\n\n  return {\n    ...barChartProps,\n    x: horizontal ? 0 : x,\n    y: horizontal ? y : 0,\n    xEnd: horizontal ? x : undefined,\n    yEnd: horizontal ? undefined : y,\n  };\n}\n\n/**\n * `BarChart` represents a basic \"Value/Value\" bar chart,\n * where each bar represents a single independent variable value and a single dependent value,\n * with bars that are centered horizontally on x-value and extend from 0 to y-value,\n * (or centered vertically on their y-value and extend from 0 to the x-value, in the case of horizontal chart variant)\n *\n * For other bar chart types, see RangeBarChart and AreaBarChart\n */\n\nexport default class BarChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in the array.\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for bar X values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `true`, this becomes 0.\n     * If `horizontal` is `false`, this gets the *dependent* variable value, the end of the bar's length.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this becomes 0.\n     * If `horizontal` is `true`, this gets the *dependent* variable value, the end of the bar's length.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n    /**\n     * Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width).\n     */\n    barThickness: PropTypes.number,\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object.\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each bar,\n     * or accessor function which returns a class.\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func,\n    /**\n     * `click` event handler callback, called when user clicks the bar.\n     */\n    onClick: PropTypes.func,\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barThickness: 8,\n    barClassName: '',\n    barStyle: {},\n  };\n\n  // gets data domain of independent variable\n  static getDomain(props) {\n    return RangeBarChart.getDomain(makeRangeBarChartProps(props));\n  }\n  static getSpacing(props) {\n    return RangeBarChart.getSpacing(makeRangeBarChartProps(props));\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, ['barStyle']);\n    return shouldUpdate;\n  }\n\n  render() {\n    // todo: throw an error if dependent axis is not a number axis\n\n    const rangeBarChartProps = makeRangeBarChartProps(this.props);\n\n    return <RangeBarChart {...rangeBarChartProps} />;\n  }\n}\n"],"file":"BarChart.js"}