{"version":3,"sources":["src/SankeyDiagram.js"],"names":["SankeyNode","props","graph","node","nodeClassName","nodeStyle","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","onMouseDownNode","onMouseUpNode","onClickNode","makeHandler","origHandler","x0","y0","Math","abs","x1","y1","propTypes","PropTypes","object","oneOfType","string","func","SankeyLink","link","linkPath","linkClassName","linkStyle","onMouseEnterLink","onMouseLeaveLink","onMouseMoveLink","onMouseDownLink","onMouseUpLink","onClickLink","strokeWidth","width","SankeyNodeTerminal","nodeTerminalWidth","nodeTerminalDistance","nodeTerminalStyle","nodeTerminalClassName","nodeTerminalAttributes","onMouseEnterNodeTerminal","onMouseLeaveNodeTerminal","onMouseMoveNodeTerminal","onMouseDownNodeTerminal","onMouseUpNodeTerminal","onClickNodeTerminal","terminalValue","getWithNode","accessor","distance","nodeHeight","height","value","style","className","attributes","bool","number","SankeyNodeLabel","nodeLabelText","nodeId","nodeLabelPlacement","nodeLabelDistance","getLabelText","placement","labelContent","isTextLabel","baseClassName","nodeLabelClassName","baseStyle","nodeLabelStyle","position","textStyle","alignmentBaseline","textAnchor","x","y","console","warn","oneOf","SankeyLinkLabel","linkLabelClassName","linkLabelStyle","linkLabelAttributes","linkLabelStartOffset","linkLabelText","linkPathId","getWithLink","startOffset","SankeyStepLabel","stepLabelPadding","stepLabelText","stepLabelClassName","stepLabelStyle","step","yPos","SVGContainer","otherProps","standalone","enhanceGraph","nodes","forEach","sourceLinksSum","sourceLinks","reduce","sum","max","links","valueSourceRelative","valueTargetRelative","maxDepth","depth","getLinkId","source","target","nodeAlignmentsByName","left","sankeyLeft","right","sankeyRight","center","sankeyCenter","justify","sankeyJustify","SankeyDiagram","React","Component","getDerivedStateFromProps","nextProps","prevState","prevProps","sankeyLayoutPropKeys","hasChangedSankey","some","key","makeSankeyGraph","innerWidth","marginLeft","marginRight","innerHeight","marginTop","marginBottom","makeSankey","size","nodeWidth","nodePadding","nodeSort","linkSort","nodeAlign","nodeAlignment","shouldClone","sankeyGraph","constructor","state","render","makeLinkPath","mapNodesInGroupIf","shouldShow","groupClassName","mapFunc","map","i","mapLinksInGroupIf","displayStepLabelsIf","depthMapXPos","depthMapYPos","n","min","stepLabelProps","showLinks","linkProps","showNodes","showNodeTerminals","showLinkLabels","showLinkSourceLabels","showLinkTargetLabels","hasLabel","labelProps","showNodeLabels","commonProps","linkSourceLabelText","linkSourceLabelClassName","linkSourceLabelStyle","linkSourceLabelAttributes","linkSourceLabelStartOffset","linkTargetLabelText","linkTargetLabelClassName","linkTargetLabelStyle","linkTargetLabelAttributes","linkTargetLabelStartOffset","arrayOf","isRequired","shape","index","rx","ry","name","label","linkValue","valueText","sourceText","targetText","valueRelative","isFinite","percentText"],"mappings":"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","sourcesContent":["import {\n  sankey,\n  sankeyCenter,\n  sankeyJustify,\n  sankeyLeft,\n  sankeyLinkHorizontal,\n  sankeyRight,\n} from 'd3-sankey';\nimport isFunction from 'lodash/isFunction';\nimport isNull from 'lodash/isNull';\nimport isUndefined from 'lodash/isUndefined';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport omit from 'lodash/omit';\nimport get from 'lodash/get';\nimport maxBy from 'lodash/maxBy';\nimport has from 'lodash/has';\nimport cloneDeep from 'lodash/cloneDeep';\nimport map from 'lodash/map';\nimport { format as numberFormat, formatPrefix } from 'd3-format';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getValue } from './utils/Data';\nimport { bindTrailingArgs } from './util.js';\n\nconst SankeyNode = props => {\n  const {\n    graph,\n    node,\n    nodeClassName,\n    nodeStyle,\n    onMouseEnterNode,\n    onMouseLeaveNode,\n    onMouseMoveNode,\n    onMouseDownNode,\n    onMouseUpNode,\n    onClickNode,\n  } = props;\n  // create partial functions for handlers - callbacks with the current node/graph arguments attached\n  const makeHandler = origHandler =>\n    isFunction(origHandler)\n      ? bindTrailingArgs(origHandler, { node, graph })\n      : null;\n\n  return (\n    <rect\n      x={node.x0}\n      y={node.y0}\n      width={Math.abs(node.x1 - node.x0)}\n      height={Math.abs(node.y1 - node.y0)}\n      className={`rct-sankey-node ${getValue(nodeClassName, node, graph)}`}\n      style={getValue(nodeStyle, node, graph)}\n      onMouseEnter={makeHandler(onMouseEnterNode)}\n      onMouseLeave={makeHandler(onMouseLeaveNode)}\n      onMouseMove={makeHandler(onMouseMoveNode)}\n      onMouseDown={makeHandler(onMouseDownNode)}\n      onMouseUp={makeHandler(onMouseUpNode)}\n      onClick={makeHandler(onClickNode)}\n    />\n  );\n};\n\nSankeyNode.propTypes = {\n  graph: PropTypes.object,\n  node: PropTypes.object,\n  nodeClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  nodeStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  onMouseEnterNode: PropTypes.func,\n  onMouseLeaveNode: PropTypes.func,\n  onMouseMoveNode: PropTypes.func,\n  onMouseDownNode: PropTypes.func,\n  onMouseUpNode: PropTypes.func,\n  onClickNode: PropTypes.func,\n};\n\nconst SankeyLink = props => {\n  const {\n    graph,\n    link,\n    linkPath,\n    linkClassName,\n    linkStyle,\n    onMouseEnterLink,\n    onMouseLeaveLink,\n    onMouseMoveLink,\n    onMouseDownLink,\n    onMouseUpLink,\n    onClickLink,\n  } = props;\n\n  // create partial functions for handlers - callbacks with the current graph/link arguments attached\n  const makeHandler = origHandler =>\n    isFunction(origHandler)\n      ? bindTrailingArgs(origHandler, { link, graph })\n      : null;\n\n  return (\n    <path\n      d={linkPath}\n      className={`rct-sankey-link ${getValue(linkClassName, link, graph)}`}\n      style={{\n        ...getValue(linkStyle, link, graph),\n        strokeWidth: link.width,\n      }}\n      onMouseEnter={makeHandler(onMouseEnterLink)}\n      onMouseLeave={makeHandler(onMouseLeaveLink)}\n      onMouseMove={makeHandler(onMouseMoveLink)}\n      onMouseDown={makeHandler(onMouseDownLink)}\n      onMouseUp={makeHandler(onMouseUpLink)}\n      onClick={makeHandler(onClickLink)}\n    />\n  );\n};\n\nSankeyLink.propTypes = {\n  graph: PropTypes.object,\n  link: PropTypes.object,\n  linkPath: PropTypes.string,\n  linkClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  linkStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  onMouseEnterLink: PropTypes.func,\n  onMouseLeaveLink: PropTypes.func,\n  onMouseMoveLink: PropTypes.func,\n  onMouseDownLink: PropTypes.func,\n  onMouseUpLink: PropTypes.func,\n  onClickLink: PropTypes.func,\n};\n\nconst SankeyNodeTerminal = props => {\n  const {\n    node,\n    graph,\n    nodeTerminalWidth,\n    nodeTerminalDistance,\n    nodeTerminalStyle,\n    nodeTerminalClassName,\n    nodeTerminalAttributes,\n    onMouseEnterNodeTerminal,\n    onMouseLeaveNodeTerminal,\n    onMouseMoveNodeTerminal,\n    onMouseDownNodeTerminal,\n    onMouseUpNodeTerminal,\n    onClickNodeTerminal,\n  } = props;\n\n  if (!node.terminalValue) return null;\n  const makeHandler = origHandler =>\n    isFunction(origHandler)\n      ? bindTrailingArgs(origHandler, { node, graph, props })\n      : null;\n  const getWithNode = accessor => getValue(accessor, node, graph, props);\n  const width = getWithNode(nodeTerminalWidth) || 0;\n  const distance = getWithNode(nodeTerminalDistance) || 0;\n  const nodeHeight = Math.abs(node.y1 - node.y0) || 0;\n  const height =\n    (nodeHeight * node.terminalValue || 0) / (node.value || 0) || 0;\n  const style = getWithNode(nodeTerminalStyle);\n  const className = `rct-sankey-node-terminal ${getWithNode(\n    nodeTerminalClassName,\n  )}`;\n  const attributes = getWithNode(nodeTerminalAttributes);\n\n  return (\n    <rect\n      x={node.x1 + distance}\n      y={node.y0 + (nodeHeight - height)}\n      {...{ width, height, style, className }}\n      {...attributes}\n      onMouseEnter={makeHandler(onMouseEnterNodeTerminal)}\n      onMouseLeave={makeHandler(onMouseLeaveNodeTerminal)}\n      onMouseMove={makeHandler(onMouseMoveNodeTerminal)}\n      onMouseDown={makeHandler(onMouseDownNodeTerminal)}\n      onMouseUp={makeHandler(onMouseUpNodeTerminal)}\n      onClick={makeHandler(onClickNodeTerminal)}\n    />\n  );\n};\n\nSankeyNodeTerminal.propTypes = {\n  node: PropTypes.object,\n  graph: PropTypes.object,\n  nodeTerminalWidth: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  nodeTerminalDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  nodeTerminalStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  nodeTerminalClassName: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  nodeTerminalAttributes: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.func,\n  ]),\n  onMouseEnterNodeTerminal: PropTypes.func,\n  onMouseLeaveNodeTerminal: PropTypes.func,\n  onMouseMoveNodeTerminal: PropTypes.func,\n  onMouseDownNodeTerminal: PropTypes.func,\n  onMouseUpNodeTerminal: PropTypes.func,\n  onClickNodeTerminal: PropTypes.func,\n};\n\nconst SankeyNodeLabel = props => {\n  const {\n    node,\n    graph,\n    nodeLabelText,\n    nodeId,\n    nodeLabelPlacement,\n    nodeLabelDistance,\n  } = props;\n  const getWithNode = accessor => getValue(accessor, node, graph, props);\n  const getLabelText = isFunction(nodeLabelText) ? nodeLabelText : nodeId;\n  const placement = getWithNode(nodeLabelPlacement);\n  const distance = getWithNode(nodeLabelDistance) || 0;\n  const labelContent = getWithNode(getLabelText);\n  // don't render empty labels\n  if (\n    isNull(labelContent) ||\n    isUndefined(labelContent) ||\n    labelContent === false ||\n    labelContent === ''\n  ) {\n    return null;\n  }\n\n  // if `labelContent` is a string or number, it is rendered as text within a SVG <text> element\n  // otherwise, it is rendered as arbitrary SVG content\n  // allows users to render components inside a node label (eg. to add icon or link)\n  const isTextLabel = isString(labelContent) || isNumber(labelContent);\n  if (!isTextLabel) {\n    return labelContent;\n  }\n\n  const baseClassName = `rct-sankey-node-label ${getWithNode(\n    props.nodeLabelClassName,\n  )}`;\n  const baseStyle = getWithNode(props.nodeLabelStyle);\n  let position;\n  let textStyle;\n\n  // use placement prop to determine x, y, alignmentBaseline and textAnchor\n  if (placement === 'above') {\n    // render label above node, centered horizontally\n    textStyle = {\n      alignmentBaseline: 'baseline',\n      textAnchor: 'middle',\n      ...baseStyle,\n    };\n    position = {\n      x: node.x0 + Math.abs(node.x1 - node.x0) / 2,\n      y: node.y0 - distance,\n    };\n  } else if (placement === 'below') {\n    // render label above node, centered horizontally\n    textStyle = {\n      alignmentBaseline: 'hanging',\n      textAnchor: 'middle',\n      ...baseStyle,\n    };\n    position = {\n      x: node.x0 + Math.abs(node.x1 - node.x0) / 2,\n      y: node.y1 + distance,\n    };\n  } else if (placement === 'before') {\n    // render label before (to left of) node, centered vertically\n    textStyle = {\n      alignmentBaseline: 'middle',\n      textAnchor: 'end',\n      ...baseStyle,\n    };\n    position = {\n      x: node.x0 - distance,\n      y: node.y0 + Math.abs(node.y1 - node.y0) / 2,\n    };\n  } else {\n    if (!isUndefined(placement) && placement !== 'after')\n      // eslint-disable-next-line no-console\n      console.warn(\n        `${placement} is not a valid value for nodeLabelPlacement - defaulting to \"after\"`,\n      );\n    // render label after (to right of) node, centered vertically\n    textStyle = {\n      alignmentBaseline: 'middle',\n      textAnchor: 'start',\n      ...baseStyle,\n    };\n    position = {\n      x: node.x1 + distance,\n      y: node.y0 + Math.abs(node.y1 - node.y0) / 2,\n    };\n  }\n\n  const className = `${baseClassName} rct-sankey-node-label-text`;\n  return (\n    <text {...position} className={className} style={textStyle}>\n      {labelContent}\n    </text>\n  );\n};\n\nSankeyNodeLabel.propTypes = {\n  node: PropTypes.object,\n  graph: PropTypes.object,\n  nodeLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  nodeLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  nodeLabelText: PropTypes.func,\n  nodeId: PropTypes.func,\n  nodeLabelPlacement: PropTypes.oneOfType([\n    PropTypes.oneOf(['before', 'after', 'above', 'below']),\n    PropTypes.func,\n  ]),\n  nodeLabelDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n};\n\nconst SankeyLinkLabel = props => {\n  const {\n    link,\n    graph,\n    linkLabelClassName,\n    linkLabelStyle,\n    linkLabelAttributes,\n    linkLabelStartOffset,\n    linkLabelText,\n    linkPathId,\n  } = props;\n  const getWithLink = accessor => getValue(accessor, link, graph, props);\n  const className = `rct-sankey-link-label ${getWithLink(\n    linkLabelClassName || '',\n  )}`;\n  const style = getWithLink(linkLabelStyle || {});\n  const attributes = getWithLink(linkLabelAttributes || {});\n  const startOffset = getWithLink(linkLabelStartOffset || 0);\n\n  return (\n    <text className={className} style={style} {...attributes}>\n      <textPath startOffset={startOffset} xlinkHref={`#${linkPathId}`}>\n        {getWithLink(linkLabelText)}\n      </textPath>\n    </text>\n  );\n};\n\nSankeyLinkLabel.propTypes = {\n  link: PropTypes.object,\n  graph: PropTypes.object,\n  linkLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  linkLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  linkLabelAttributes: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  linkLabelStartOffset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  linkLabelText: PropTypes.func,\n  linkPathId: PropTypes.string,\n};\n\nconst SankeyStepLabel = props => {\n  const {\n    x,\n    y,\n    stepLabelPadding,\n    stepLabelText,\n    stepLabelClassName,\n    stepLabelStyle,\n    step,\n  } = props;\n\n  let yPos = y;\n\n  if (isNumber(stepLabelPadding)) {\n    yPos = yPos - stepLabelPadding;\n  }\n\n  return (\n    <text\n      className={`rct-step-label ${getValue(stepLabelClassName, step)}`}\n      style={getValue(stepLabelStyle, step)}\n      x={x}\n      y={yPos}\n      key={`step-${x}-${step}`}\n    >\n      {getValue(stepLabelText, step)}\n    </text>\n  );\n};\n\nSankeyStepLabel.propTypes = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  stepLabelPadding: PropTypes.number,\n  stepLabelText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  stepLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  stepLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  step: PropTypes.string,\n};\n\nconst SVGContainer = props => {\n  const otherProps = omit(props, ['standalone']);\n  if (props.standalone) {\n    return <svg {...otherProps} />;\n  }\n  return <g {...otherProps} />;\n};\n\nSVGContainer.propTypes = {\n  standalone: PropTypes.bool,\n};\n\n/**\n * Enhance the graph object created by d3-sankey by adding some additional useful properties.\n * Adds `maxDepth` (max of node `depth` properties)\n * and `node.terminalValue` (value of node's terminal, sum of all 'out' nodes minus sum of 'in' nodes)\n */\nfunction enhanceGraph(graph) {\n  graph.nodes.forEach(node => {\n    const sourceLinksSum = (node.sourceLinks || []).reduce(\n      (sum, link) => sum + link.value,\n      0,\n    );\n    node.terminalValue = Math.max(node.value - sourceLinksSum, 0);\n  });\n  graph.links.forEach(link => {\n    link.valueSourceRelative = (link.value || 0) / get(link, 'source.value', 0);\n    link.valueTargetRelative = (link.value || 0) / get(link, 'target.value', 0);\n  });\n\n  graph.maxDepth = maxBy(graph.nodes, 'depth');\n  graph.maxDepth = graph.nodes.reduce(\n    (max, node) => Math.max(node.depth || 0, max),\n    0,\n  );\n  return graph;\n}\n\nfunction getLinkId(link, nodeId) {\n  return `link-${nodeId(link.source)}-to-${nodeId(link.target)}`;\n}\n\nconst nodeAlignmentsByName = {\n  left: sankeyLeft,\n  right: sankeyRight,\n  center: sankeyCenter,\n  justify: sankeyJustify,\n};\n\n/**\n * A `SankeyDiagram` is a type of flow diagram which visualizes directed flow between nodes\n * of a network graph. Currently only *acyclic* networks are supported.\n */\nexport default class SankeyDiagram extends React.Component {\n  static propTypes = {\n    /**\n     * Array of node objects, represented by vertical rectangles.\n     * These represent the base entities which links flow into & out of.\n     */\n    nodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n    /**\n     * Array of link objects, represented by curved paths between nodes.\n     * Links represent a magnitude of flow between one node and another.\n     * Each should have a 'source' node [identifier], a 'target' node [identifier],\n     * and a numerical value representing flow magnitude.\n     */\n    links: PropTypes.arrayOf(\n      PropTypes.shape({\n        source: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        target: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        value: PropTypes.number,\n      }),\n    ).isRequired,\n    /**\n     * Width of the SVG element.\n     */\n    width: PropTypes.number.isRequired,\n    /**\n     * Height of the SVG element.\n     */\n    height: PropTypes.number.isRequired,\n    /**\n     * Boolean which decides if the nodes & links props should be cloned before being mutated into\n     * the Sankey data structure. Passing `false` is faster, but may cause unintended side effects\n     * if nodes or links data are used elsewhere\n     */\n    shouldClone: PropTypes.bool,\n    /**\n     * `className` attribute to be applied to the SVG element.\n     */\n    className: PropTypes.string,\n    /**\n     * Inline style object to be applied to the SVG element.\n     */\n    style: PropTypes.object,\n    /**\n     * Boolean which determines whether the chart should be rendered as a standalone `<svg>` element\n     * or a `<g>` group element (as a child within an existing `<svg>`).\n     * True by default, pass `false` to render in a `<g>`.\n     */\n    standalone: PropTypes.bool,\n    /**\n     * Internal top margin, in pixels. Generally used to leave extra space inside the SVG for labels.\n     */\n    marginTop: PropTypes.number,\n    /**\n     * Internal bottom margin, in pixels.\n     */\n    marginBottom: PropTypes.number,\n    /**\n     * Internal left margin, in pixels.\n     */\n    marginLeft: PropTypes.number,\n    /**\n     * Internal right margin, in pixels.\n     */\n    marginRight: PropTypes.number,\n\n    /**\n     * Boolean which determines if node rectangles should be shown,\n     * or function (`showNode(node, graph)`) which returns a boolean\n     */\n    showNodes: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `nodeId(node, graph)` which specifies how to access the ID of each node object.\n     * These should be the same identifiers used by `links[].source` and `.target`.\n     * Uses the node's index in `nodes` array by default.\n     */\n    nodeId: PropTypes.func,\n    /**\n     * Width (in pixels) of the vertical node rectangles.\n     */\n    nodeWidth: PropTypes.number,\n    /**\n     * Vertical padding (in pixels) between each of the node lines.\n     */\n    nodePadding: PropTypes.number,\n    /**\n     * Node alignment method used to layout the nodes.\n     * Must be 'left', 'right', 'center', or 'justify'.\n     * See [d3-sankey alignment docs](https://github.com/d3/d3-sankey#alignments) for more details.\n     */\n    nodeAlignment: PropTypes.oneOf(['left', 'right', 'center', 'justify']),\n    /**\n     * `className` attribute to be applied to each node,\n     * or accessor function which returns a class (string).\n     */\n    nodeClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each node,\n     * or accessor function which returns a style object.\n     */\n    nodeStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Node sort function\n     */\n    nodeSort: PropTypes.func,\n    /**\n     * Node `mouseenter` event handler, called when user's mouse enters a node.\n     */\n    onMouseEnterNode: PropTypes.func,\n    /**\n     * Node `mouseleave` event handler, called when user's mouse leaves a node.\n     */\n    onMouseLeaveNode: PropTypes.func,\n    /**\n     * Node `mousemove` event handler, called when user's mouse moves within a node.\n     */\n    onMouseMoveNode: PropTypes.func,\n    /**\n     * Node `mousedown` event handler, called when user's mouse button is depressed within a node.\n     */\n    onMouseDownNode: PropTypes.func,\n    /**\n     * Node `mouseup` event handler, called when user's mouse button is released within a node.\n     */\n    onMouseUpNode: PropTypes.func,\n    /**\n     * Node `click` event handler, called when user clicks within a node.\n     */\n    onClickNode: PropTypes.func,\n    /**\n     * Boolean which determines if link paths should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinks: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each link,\n     * or accessor function which returns a class (string).\n     */\n    linkClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Link sort function\n     */\n    linkSort: PropTypes.func,\n    /**\n     * Inline style object to be applied to each link,\n     * or accessor function which returns a style object.\n     */\n    linkStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Link `mouseenter` event handler, called when user's mouse enters a link.\n     */\n    onMouseEnterLink: PropTypes.func,\n    /**\n     * Link `mouseleave` event handler, called when user's mouse leaves a link.\n     */\n    onMouseLeaveLink: PropTypes.func,\n    /**\n     * Link `mousemove` event handler, called when user's mouse moves within a link.\n     */\n    onMouseMoveLink: PropTypes.func,\n    /**\n     * Link `mousedown` event handler, called when user's mouse button is depressed within a link.\n     */\n    onMouseDownLink: PropTypes.func,\n    /**\n     * Link `mouseup` event handler, called when user's mouse button is released within a link.\n     */\n    onMouseUpLink: PropTypes.func,\n    /**\n     * Link `click` event handler, called when user clicks within a link.\n     */\n    onClickLink: PropTypes.func,\n    /**\n     * Boolean which determines if node terminals should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean.\n     * Terminals are bars that run alongside to show the amount\n     * which has flowed *in* but not *out*\n     */\n    showNodeTerminals: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Width (in pixels) of the node terminal rectangles,\n     * or accessor function `f(node, graph)` which returns a width.\n     */\n    nodeTerminalWidth: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    /**\n     * Distance (in pixels) between nodes and their terminals,\n     * or accessor function `f(node, graph)` which returns a distance.\n     */\n    nodeTerminalDistance: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.func,\n    ]),\n    /**\n     * `className` attribute to be applied to each node terminal,\n     * or accessor function which returns a class (string).\n     */\n    nodeTerminalClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]),\n    /**\n     * Inline style object to be applied to each node terminal,\n     * or accessor function which returns a style object.\n     */\n    nodeTerminalStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Attributes object to be applied to each node terminal element,\n     * or accessor function which returns an object.\n     */\n    nodeTerminalAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    /**\n     * Node terminal `mouseenter` event handler, called when user's mouse enters a node terminal.\n     */\n    onMouseEnterNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mouseleave` event handler, called when user's mouse leaves a node terminal.\n     */\n    onMouseLeaveNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mousemove` event handler, called when user's mouse moves within a node terminal.\n     */\n    onMouseMoveNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mousedown` event handler, called when user's mouse button is depressed within a node terminal.\n     */\n    onMouseDownNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mouseup` event handler, called when user's mouse button is released within a node terminal.\n     */\n    onMouseUpNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `click` event handler, called when user clicks within a node terminal.\n     */\n    onClickNodeTerminal: PropTypes.func,\n\n    /**\n     * Boolean which determines if node labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showNodeLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Placement of the node label relative to the node rectangle.\n     * Expects 'before', 'after', 'above' or 'below', or a function which returns one of these.\n     * By default, labels in the left half of the diagram are placed 'after' and those in the right half 'before'\n     */\n    nodeLabelPlacement: PropTypes.oneOfType([\n      PropTypes.oneOf(['before', 'after', 'above', 'below']),\n      PropTypes.func,\n    ]),\n    /**\n     * Distance (in pixels) between nodes and their labels,\n     * or accessor function `f(node, graph)` which returns a distance.\n     */\n    nodeLabelDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    /**\n     * Accessor function `nodeLabelText(node, graph)` which returns the content to be used for node labels.\n     * The function may return a string/number (rendered as SVG `<text>`),\n     * or arbitrary React SVG element(s) (rendered as-is inside the SVG).\n     * NOTE: in the latter case (returning arbitrary SVG), `nodeLabelPlacement`, `nodeLabelDistance`,\n     * `nodeLabelClassName` and `nodeLabelStyle` props will not be applied -\n     * user is responsible for all positioning and attributes on this element.\n     */\n    nodeLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each node label,\n     * or accessor function which returns a class (string).\n     */\n    nodeLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each node label,\n     * or accessor function which returns a style object.\n     */\n    nodeLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n    /**\n     * Boolean which determines if link labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link labels.\n     */\n    linkLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link label,\n     * or accessor function which returns a class (string).\n     */\n    linkLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each link label,\n     * or accessor function which returns a style object.\n     */\n    linkLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Attributes object to be applied to each link label element,\n     * or accessor function which returns an object.\n     */\n    linkLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * Boolean which determines if link *source* labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkSourceLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link *source* labels.\n     */\n    linkSourceLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link *source* label,\n     * or accessor function which returns a class (string).\n     */\n    linkSourceLabelClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]),\n    /**\n     * Inline style object to be applied to each link *source* label,\n     * or accessor function which returns a style object.\n     */\n    linkSourceLabelStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    /**\n     * Attributes object to be applied to each link *source* label,\n     * or accessor function which returns an object.\n     */\n    linkSourceLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link *source* label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkSourceLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * Boolean which determines if link *target* labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkTargetLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link *target* labels.\n     */\n    linkTargetLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link *target* label,\n     * or accessor function which returns a class (string).\n     */\n    linkTargetLabelClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]),\n    /**\n     * Inline style object to be applied to each link *target* label,\n     * or accessor function which returns a style object.\n     */\n    linkTargetLabelStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    /**\n     * Attributes object to be applied to each link *target* label,\n     * or accessor function which returns an object.\n     */\n    linkTargetLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link *target* label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkTargetLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * Text for step label or\n     * accessor function `f(step)` that returns the label text\n     */\n    stepLabelText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * `className` attribute applied to each label,\n     * or accessor function which returns a class (string)\n     */\n    stepLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each label,\n     * or accessor function which returns an object\n     */\n    stepLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Vertical padding (in pixels) between step label and uppermost positioned node of that step\n     */\n    stepLabelPadding: PropTypes.number,\n  };\n  static defaultProps = {\n    width: 400,\n    height: 300,\n    shouldClone: true,\n    className: '',\n    style: {},\n    standalone: true,\n    marginTop: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    nodeId: node => node.index,\n    showNodes: true,\n    nodeWidth: 12,\n    nodePadding: 8,\n    stepLabelPadding: 8,\n    nodeAlignment: 'justify',\n    nodeClassName: '',\n    nodeStyle: {},\n    showLinks: true,\n    linkClassName: '',\n    linkStyle: {},\n    showNodeTerminals: true,\n    nodeTerminalWidth: 5,\n    nodeTerminalDistance: 1,\n    nodeTerminalClassName: '',\n    nodeTerminalStyle: {},\n    nodeTerminalAttributes: { rx: 2, ry: 2 },\n    showNodeLabels: true,\n    nodeLabelPlacement: (node, graph) => {\n      return node.depth < graph.maxDepth / 2 ? 'after' : 'before';\n    },\n    nodeLabelDistance: 4,\n    nodeLabelText: (node, graph, props) => {\n      if (has(node, 'name')) return node.name;\n      if (has(node, 'label')) return node.label;\n      return getValue(props.nodeId, node, graph, props);\n    },\n    nodeLabelClassName: '',\n    nodeLabelStyle: {},\n    showLinkLabels: false,\n    linkLabelText: (link, graph, props) => {\n      const linkValue = link.value || 0;\n      const valueText = formatPrefix('.1~f', linkValue)(linkValue);\n      const sourceText = getValue(\n        props.nodeLabelText,\n        link.source,\n        graph,\n        props,\n      );\n      const targetText = getValue(\n        props.nodeLabelText,\n        link.target,\n        graph,\n        props,\n      );\n      return `${sourceText}→${targetText}: ${valueText}`;\n    },\n    linkLabelClassName: '',\n    linkLabelStyle: {},\n    linkLabelAttributes: {},\n    linkLabelStartOffset: '25%',\n    showLinkSourceLabels: false,\n    linkSourceLabelText: (link, graph, props) => {\n      const valueRelative = link.valueSourceRelative;\n      if (valueRelative === null || !isFinite(valueRelative)) return '';\n      const percentText =\n        valueRelative < 0.001 ? '<0.1%' : numberFormat('.1~%')(valueRelative);\n      return `${percentText} to ${getValue(\n        props.nodeLabelText,\n        link.target,\n        graph,\n        props,\n      )}`;\n    },\n    linkSourceLabelClassName: '',\n    linkSourceLabelStyle: {},\n    linkSourceLabelAttributes: {},\n    linkSourceLabelStartOffset: '2%',\n    showLinkTargetLabels: false,\n    linkTargetLabelText: (link, graph, props) => {\n      const valueRelative = link.valueTargetRelative;\n      if (valueRelative === null || !isFinite(valueRelative)) return '';\n      const percentText =\n        valueRelative < 0.001 ? '<0.1%' : numberFormat('.1~%')(valueRelative);\n      return `${percentText} from ${getValue(\n        props.nodeLabelText,\n        link.source,\n        graph,\n        props,\n      )}`;\n    },\n    linkTargetLabelClassName: '',\n    linkTargetLabelStyle: {},\n    linkTargetLabelAttributes: {},\n    linkTargetLabelStartOffset: '98%',\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { prevProps } = prevState;\n\n    // only update this._graph if a prop which affects the sankey layout has changed (most don't)\n    const sankeyLayoutPropKeys = [\n      'nodes',\n      'links',\n      'width',\n      'height',\n      'marginTop',\n      'marginBottom',\n      'marginLeft',\n      'marginRight',\n      'nodeId',\n      'nodeWidth',\n      'nodePadding',\n      'nodeAlignment',\n    ];\n\n    const hasChangedSankey = sankeyLayoutPropKeys.some(key => {\n      return nextProps[key] !== prevProps[key];\n    });\n    if (hasChangedSankey) {\n      const graph = SankeyDiagram.makeSankeyGraph(nextProps);\n      return {\n        graph,\n        prevProps: cloneDeep(nextProps),\n      };\n    }\n\n    return null;\n  }\n\n  static makeSankeyGraph(props) {\n    const innerWidth = props.width - (props.marginLeft + props.marginRight);\n    const innerHeight = props.height - (props.marginTop + props.marginBottom);\n    const makeSankey = sankey()\n      .size([innerWidth, innerHeight])\n      .nodeId(props.nodeId)\n      .nodeWidth(props.nodeWidth)\n      .nodePadding(props.nodePadding)\n      .nodeSort(props.nodeSort)\n      .linkSort(props.linkSort)\n      .nodeAlign(\n        nodeAlignmentsByName[props.nodeAlignment] ||\n          nodeAlignmentsByName.justify,\n      );\n\n    const nodes = props.shouldClone ? cloneDeep(props.nodes) : props.nodes;\n    const links = props.shouldClone ? cloneDeep(props.links) : props.links;\n    const sankeyGraph = makeSankey({ nodes, links });\n    return enhanceGraph(sankeyGraph);\n  }\n\n  constructor(props) {\n    super(props);\n    const graph = SankeyDiagram.makeSankeyGraph(props);\n    const prevProps = cloneDeep(props);\n    this.state = { graph, prevProps };\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      style,\n      standalone,\n      nodeId,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n    } = this.props;\n\n    const { graph } = this.state;\n    const makeLinkPath = sankeyLinkHorizontal();\n    const className = `rct-sankey-diagram ${this.props.className}`;\n    const innerWidth = width - (marginLeft + marginRight);\n    const innerHeight = height - (marginTop + marginBottom);\n\n    function mapNodesInGroupIf(shouldShow, groupClassName, mapFunc) {\n      if (!shouldShow) return null;\n      return (\n        <g className={groupClassName}>\n          {(graph.nodes || []).map((node, i) => {\n            if (!getValue(shouldShow, node, graph)) return null;\n            const key = `node-${nodeId(node)}`;\n            return mapFunc(node, i, key);\n          })}\n        </g>\n      );\n    }\n\n    function mapLinksInGroupIf(shouldShow, groupClassName, mapFunc) {\n      if (!shouldShow) return null;\n      return (\n        <g className={groupClassName}>\n          {(graph.links || []).map((link, i) => {\n            if (!getValue(shouldShow, link, graph)) return null;\n            const key = `link-${nodeId(link.source)}-to-${nodeId(link.target)}`;\n            return mapFunc(link, i, key);\n          })}\n        </g>\n      );\n    }\n\n    function displayStepLabelsIf(\n      stepLabelText,\n      stepLabelClassName,\n      stepLabelStyle,\n      stepLabelPadding,\n      nodes,\n    ) {\n      if (!stepLabelText) {\n        return null;\n      }\n\n      const depthMapXPos = {};\n      const depthMapYPos = {};\n\n      nodes.forEach(n => {\n        depthMapXPos[n.depth] = n.x0;\n\n        // For the given depth, set the y equal to the highest positioned y value\n        depthMapYPos[n.depth] = depthMapYPos[n.depth]\n          ? Math.min(n.y0, depthMapYPos[n.depth])\n          : n.y0;\n      });\n\n      return (\n        <g className=\"rct-step-labels\" width={innerWidth} height={100}>\n          {map(depthMapXPos, (x, step) => {\n            const stepLabelProps = {\n              y: depthMapYPos[step],\n              step,\n              x,\n              stepLabelText,\n              stepLabelClassName,\n              stepLabelPadding,\n              stepLabelStyle,\n            };\n\n            return (\n              <SankeyStepLabel key={`rct-step-${step}`} {...stepLabelProps} />\n            );\n          })}\n        </g>\n      );\n    }\n\n    return (\n      <SVGContainer {...{ standalone, width, height, className, style }}>\n        <g\n          width={innerWidth}\n          height={innerHeight}\n          transform={`translate(${marginLeft}, ${marginTop})`}\n        >\n          {displayStepLabelsIf(\n            this.props.stepLabelText,\n            this.props.stepLabelClassName,\n            this.props.stepLabelStyle,\n            this.props.stepLabelPadding,\n            graph.nodes,\n          )}\n          {mapLinksInGroupIf(\n            this.props.showLinks,\n            'rct-sankey-links',\n            (link, i, key) => {\n              const linkProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPath: makeLinkPath(link),\n              };\n              return <SankeyLink {...linkProps} />;\n            },\n          )}\n          {mapNodesInGroupIf(\n            this.props.showNodes,\n            'rct-sankey-nodes',\n            (node, i, key) => {\n              return <SankeyNode {...this.props} {...{ key, graph, node }} />;\n            },\n          )}\n          ;\n          {mapNodesInGroupIf(\n            this.props.showNodeTerminals,\n            'rct-sankey-node-terminals',\n            (node, i, key) => {\n              return (\n                <SankeyNodeTerminal {...this.props} {...{ key, graph, node }} />\n              );\n            },\n          )}\n          ;\n          {/* the three types of link labels (link, link source, link target) use textpath to follow the link's path */}\n          {/* to minimize dom elements, first render one set of path definitions to be used by all three label types */}\n          {this.props.showLinkLabels ||\n          this.props.showLinkSourceLabels ||\n          this.props.showLinkTargetLabels ? (\n            <defs>\n              {graph.links.map(link => {\n                const hasLabel =\n                  getValue(this.props.showLinkLabels, link, graph) ||\n                  getValue(this.props.showLinkSourceLabels, link, graph) ||\n                  getValue(this.props.showLinkTargetLabels, link, graph);\n                if (!hasLabel) return null;\n\n                const linkPath = makeLinkPath(link);\n                const linkPathId = `${getLinkId(link, nodeId)}-path`;\n                return <path id={linkPathId} d={linkPath} key={linkPathId} />;\n              })}\n            </defs>\n          ) : null}\n          {mapLinksInGroupIf(\n            this.props.showLinkLabels,\n            'rct-sankey-link-labels',\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const labelProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId,\n              };\n              return <SankeyLinkLabel {...labelProps} />;\n            },\n          )}\n          {mapNodesInGroupIf(\n            this.props.showNodeLabels,\n            'rct-sankey-node-labels',\n            (node, i, key) => {\n              return (\n                <SankeyNodeLabel {...this.props} {...{ key, graph, node }} />\n              );\n            },\n          )}\n          ;\n          {mapLinksInGroupIf(\n            this.props.showLinkSourceLabels,\n            'rct-sankey-link-source-labels',\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const commonProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId,\n              };\n              const labelProps = {\n                ...commonProps,\n                linkLabelText: this.props.linkSourceLabelText,\n                linkLabelClassName: this.props.linkSourceLabelClassName,\n                linkLabelStyle: this.props.linkSourceLabelStyle,\n                linkLabelAttributes: this.props.linkSourceLabelAttributes,\n                linkLabelStartOffset: this.props.linkSourceLabelStartOffset,\n              };\n\n              return <SankeyLinkLabel {...labelProps} />;\n            },\n          )}\n          {mapLinksInGroupIf(\n            this.props.showLinkTargetLabels,\n            'rct-sankey-link-target-labels',\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const commonProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId,\n              };\n              const labelProps = {\n                ...commonProps,\n                linkLabelText: this.props.linkTargetLabelText,\n                linkLabelClassName: this.props.linkTargetLabelClassName,\n                linkLabelStyle: {\n                  textAnchor: 'end',\n                  ...this.props.linkTargetLabelStyle,\n                },\n                linkLabelAttributes: this.props.linkTargetLabelAttributes,\n                linkLabelStartOffset: this.props.linkTargetLabelStartOffset,\n              };\n\n              return <SankeyLinkLabel {...labelProps} />;\n            },\n          )}\n        </g>\n      </SVGContainer>\n    );\n  }\n}\n"],"file":"SankeyDiagram.js"}