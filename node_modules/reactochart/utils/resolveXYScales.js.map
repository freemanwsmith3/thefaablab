{"version":3,"sources":["../src/utils/resolveXYScales.js"],"names":["isValidScaleType","scaleType","validScaleTypes","includes","areValidScaleTypes","scaleTypes","every","mapOverChildren","children","iteratee","iterateeArgs","Error","React","Children","map","child","isValidElement","props","type","omitNullUndefined","obj","v","resolveXYScales","ComposedComponent","Component","width","height","xScaleType","yScaleType","invertXScale","invertYScale","xDomain","yDomain","xScale","yScale","marginTop","marginBottom","marginLeft","marginRight","spacingTop","spacingBottom","spacingLeft","spacingRight","spacing","top","bottom","left","right","margin","innerChartWidth","innerChartHeight","xScaleResult","yScaleResult","xRange","domain","range","reverse","yRange","_resolveScaleType","isDone","getScaleType","componentScaleTypes","Object","assign","Array","isArray","data","datasets","x","y","count","childrenScaleTypes","bind","childXScaleTypes","childScaleTypes","length","console","warn","childYScaleTypes","_resolveDomain","includeXZero","includeYZero","xDataType","yDataType","isXDone","isYDone","getDomain","componentXDomain","componentYDomain","childrenDomains","childXDomains","childDomains","childYDomains","_resolveTickDomain","getTickDomain","componentTickDomains","childrenTickDomains","childrenXTickDomains","childTickDomains","xTickDomain","undefined","childrenYTickDomains","yTickDomain","_resolveMargin","isNumber","getMargin","componentMargin","childrenMargins","childrenMargin","childMargins","_resolveSpacing","getSpacing","componentSpacing","childrenSpacings","childrenSpacing","childSpacing","render","slice","scaleOptions","tempScale","_makeScales","tempXScale","tempYScale","passedProps","PropTypes","func","number","bool","defaultProps"],"mappings":"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","sourcesContent":["import isFunction from 'lodash/isFunction';\nimport compact from 'lodash/compact';\nimport omitBy from 'lodash/omitBy';\nimport isUndefined from 'lodash/isUndefined';\nimport isNull from 'lodash/isNull';\nimport uniq from 'lodash/uniq';\nimport inRange from 'lodash/inRange';\nimport defaults from 'lodash/defaults';\nimport isNumber from 'lodash/isNumber';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  combineBorderObjects,\n  combineDomains,\n  domainFromDatasets,\n  inferDatasetsType,\n  isValidDomain,\n  makeAccessor2,\n} from './Data';\nimport { innerHeight, innerRangeX, innerRangeY, innerWidth } from './Margin';\nimport {\n  dataTypeFromScaleType,\n  inferDataTypeFromDomain,\n  initScale,\n  isValidScale,\n  scaleTypeFromDataType,\n} from './Scale';\n\n/**\n * `resolveXYScales` is a higher-order-component.\n *\n * @param {Component} Component - The React Component (class) which should be wrapped by this HOC\n * @returns {Component} - A Component which auto-resolves XY scales from given props\n */\n\nfunction isValidScaleType(scaleType) {\n  const validScaleTypes = ['ordinal', 'time', 'log', 'pow', 'linear'];\n\n  return validScaleTypes.includes(scaleType);\n}\n\nfunction areValidScaleTypes(scaleTypes) {\n  return scaleTypes.every(isValidScaleType);\n}\n\nfunction mapOverChildren(children, iteratee, ...iterateeArgs) {\n  // loop over all children (react elements) and call iteratee (a function) on each one\n  // iteratee is called with parameters (child.props, child.type, ...iterateeArgs)\n  if (!isFunction(iteratee))\n    throw new Error('mapOverChildren iteratee must be a function');\n\n  return compact(\n    React.Children.map(children, child => {\n      if (!child || !React.isValidElement(child)) return null;\n      return iteratee(child.props, child.type, ...iterateeArgs);\n    }),\n  );\n}\n\nfunction omitNullUndefined(obj) {\n  return omitBy(obj, v => isUndefined(v) || isNull(v));\n}\n\nexport default function resolveXYScales(ComposedComponent) {\n  return class extends React.Component {\n    static propTypes = {\n      /**\n       * Scale determined by our resolveXYScales higher order component.\n       * Override this prop if you'd like to pass in your own d3 scale.\n       */\n      xScale: PropTypes.func,\n      /**\n       * Scale determined by our resolveXYScales higher order component.\n       * Override this prop if you'd like to pass in your own d3 scale.\n       */\n      yScale: PropTypes.func,\n      /**\n       * Internal top margin, in pixels.\n       */\n      marginTop: PropTypes.number,\n      /**\n       * Internal bottom margin, in pixels.\n       */\n      marginBottom: PropTypes.number,\n      /**\n       * Internal left margin, in pixels.\n       */\n      marginLeft: PropTypes.number,\n      /**\n       * Internal right margin, in pixels.\n       */\n      marginRight: PropTypes.number,\n      /**\n       * Internal top spacing of XYPlot, in pixels.\n       */\n      spacingTop: PropTypes.number,\n      /**\n       * Internal bottom spacing of XYPlot, in pixels.\n       */\n      spacingBottom: PropTypes.number,\n      /**\n       * Internal left spacing of XYPlot, in pixels.\n       */\n      spacingLeft: PropTypes.number,\n      /**\n       * Internal right spacing of XYPlot, in pixels.\n       */\n      spacingRight: PropTypes.number,\n      /**\n       * Whether or not to invert the x scale\n       */\n      invertXScale: PropTypes.bool,\n      /**\n       * Whether or not to invert the y scale\n       */\n      invertYScale: PropTypes.bool,\n      /**\n       * (outer) width of the chart (SVG element).\n       */\n      width: PropTypes.number,\n      /**\n       * (outer) width of the chart (SVG element).\n       */\n      height: PropTypes.number,\n    };\n\n    // todo better way for HOC's to pass statics through?\n    static getScaleType = ComposedComponent.getScaleType;\n    static getSpacing = ComposedComponent.getSpacing;\n    static getDomain = ComposedComponent.getDomain;\n    static getMargin = ComposedComponent.getMargin;\n    static defaultProps = ComposedComponent.defaultProps;\n\n    _resolveScaleType(props, Component) {\n      let { xScaleType, yScaleType } = props;\n\n      const isDone = () => areValidScaleTypes([xScaleType, yScaleType]);\n\n      // short-circuit if both scale types provided\n      if (isDone()) return { xScaleType, yScaleType };\n\n      // if Component provides a custom static getScaleType method\n      // use it to determine remaining scale types\n      if (isFunction(Component.getScaleType)) {\n        const componentScaleTypes = omitNullUndefined(\n          Component.getScaleType(props),\n        );\n        ({ xScaleType, yScaleType } = Object.assign(\n          componentScaleTypes,\n          omitNullUndefined({ xScaleType, yScaleType }),\n        ));\n        if (isDone()) return { xScaleType, yScaleType };\n      }\n\n      // if component has domain props,\n      // infer the data type, & use that to get scale type\n      if (!isValidScaleType(xScaleType) && isValidDomain(props.xDomain)) {\n        xScaleType = scaleTypeFromDataType(\n          inferDataTypeFromDomain(props.xDomain),\n        );\n      }\n      if (!isValidScaleType(yScaleType) && isValidDomain(props.yDomain)) {\n        yScaleType = scaleTypeFromDataType(\n          inferDataTypeFromDomain(props.yDomain),\n        );\n      }\n      if (isDone()) return { xScaleType, yScaleType };\n\n      // if Component has data or datasets props,\n      // infer the data type, & use that to get scale type\n      if (Array.isArray(props.data) || Array.isArray(props.datasets)) {\n        const datasets = Array.isArray(props.datasets)\n          ? props.datasets\n          : [props.data];\n\n        if (!isValidScaleType(xScaleType)) {\n          xScaleType = scaleTypeFromDataType(\n            inferDatasetsType(datasets, makeAccessor2(props.x)),\n          );\n        }\n        if (!isValidScaleType(yScaleType)) {\n          yScaleType = scaleTypeFromDataType(\n            inferDatasetsType(datasets, makeAccessor2(props.y)),\n          );\n        }\n        if (isDone()) return { xScaleType, yScaleType };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their scale types the same way\n      if (React.Children.count(props.children)) {\n        const childrenScaleTypes = mapOverChildren(\n          props.children,\n          this._resolveScaleType.bind(this),\n        );\n\n        if (!isValidScaleType(xScaleType)) {\n          const childXScaleTypes = compact(\n            uniq(\n              childrenScaleTypes.map(\n                childScaleTypes => childScaleTypes.xScaleType,\n              ),\n            ),\n          );\n          if (!childXScaleTypes.length === 1)\n            console.warn(\n              \"Multiple children with different X scale types found - defaulting to 'ordinal'\",\n            );\n          xScaleType =\n            childXScaleTypes.length === 1 ? childXScaleTypes[0] : 'ordinal';\n        }\n        if (!isValidScaleType(yScaleType)) {\n          const childYScaleTypes = compact(\n            uniq(\n              childrenScaleTypes.map(\n                childScaleTypes => childScaleTypes.yScaleType,\n              ),\n            ),\n          );\n          if (!childYScaleTypes.length === 1)\n            console.warn(\n              \"Multiple children with different Y scale types found - defaulting to 'ordinal'\",\n            );\n          yScaleType =\n            childYScaleTypes.length === 1 ? childYScaleTypes[0] : 'ordinal';\n        }\n      }\n\n      // if(!isDone()) console.warn(`resolveXYScales was unable to resolve both scale types. xScaleType: ${xScaleType}, yScaleType: ${yScaleType}`);\n\n      return { xScaleType, yScaleType };\n    }\n\n    _resolveDomain(props, Component, xScaleType, yScaleType) {\n      let { xDomain, yDomain } = props;\n      const { includeXZero, includeYZero } = props;\n      const xDataType = dataTypeFromScaleType(xScaleType);\n      const yDataType = dataTypeFromScaleType(yScaleType);\n\n      const isXDone = () => isValidDomain(xDomain, xDataType);\n      const isYDone = () => isValidDomain(yDomain, yDataType);\n      const isDone = () => isXDone() && isYDone();\n\n      // short-circuit if all domains provided\n      if (isDone()) return { xDomain, yDomain };\n\n      // if Component provides a custom static getScaleType method\n      // use it to determine remaining scale types\n      if (isFunction(Component.getDomain)) {\n        const {\n          xDomain: componentXDomain,\n          yDomain: componentYDomain,\n        } = Component.getDomain({ ...props, xScaleType, yScaleType });\n\n        if (\n          !isXDone() &&\n          componentXDomain &&\n          !isValidDomain(componentXDomain, xDataType)\n        )\n          console.warn(\n            `Component.getDomain returned an invalid domain for data type '${xDataType}': ${componentXDomain} - ignoring`,\n          );\n        if (!isXDone() && isValidDomain(componentXDomain, xDataType))\n          xDomain = componentXDomain;\n\n        if (\n          !isYDone() &&\n          componentYDomain &&\n          !isValidDomain(componentYDomain, yDataType)\n        )\n          console.warn(\n            `Component.getDomain returned an invalid domain for data type '${yDataType}': ${componentYDomain} - ignoring`,\n          );\n        if (!isYDone() && isValidDomain(componentYDomain, yDataType))\n          yDomain = componentYDomain;\n      }\n\n      // if Component has data or datasets props,\n      // use the default domainFromDatasets function to determine a domain from them\n      if (\n        !isDone() &&\n        (Array.isArray(props.data) || Array.isArray(props.datasets))\n      ) {\n        const datasets = Array.isArray(props.datasets)\n          ? props.datasets\n          : [props.data];\n        if (!isXDone()) {\n          xDomain = domainFromDatasets(\n            datasets,\n            makeAccessor2(props.x),\n            xDataType,\n          );\n        }\n        if (!isYDone()) {\n          yDomain = domainFromDatasets(\n            datasets,\n            makeAccessor2(props.y),\n            yDataType,\n          );\n        }\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their domains the same way,\n      // and combine them into a single domain, if there are multiple\n      if (!isDone() && React.Children.count(props.children)) {\n        const childrenDomains = mapOverChildren(\n          props.children,\n          this._resolveDomain.bind(this),\n          xScaleType,\n          yScaleType,\n        );\n\n        if (!isXDone()) {\n          const childXDomains = compact(\n            childrenDomains.map(childDomains => childDomains.xDomain),\n          );\n          xDomain = combineDomains(childXDomains, xDataType);\n        }\n        if (!isYDone()) {\n          const childYDomains = compact(\n            childrenDomains.map(childDomains => childDomains.yDomain),\n          );\n          yDomain = combineDomains(childYDomains, yDataType);\n        }\n      }\n\n      if (isDone()) {\n        if (includeXZero && !inRange(0, ...xDomain)) {\n          // If both are negative set max of domain to 0\n          if (xDomain[0] < 0 && xDomain[1] < 0) {\n            xDomain[1] = 0;\n          } else {\n            xDomain[0] = 0;\n          }\n        }\n\n        if (includeYZero && !inRange(0, ...yDomain)) {\n          // If both are negative set max of domain to 0\n          if (yDomain[0] < 0 && yDomain[1] < 0) {\n            yDomain[1] = 0;\n          } else {\n            yDomain[0] = 0;\n          }\n        }\n      }\n\n      // TODO handle resolveXYScales not calculating the domain\n      // Because this is recursive on its children it will log this warn for children missing domain\n      // even though it is later inferred by parent later during the recursion\n      // if (!isDone()) {\n      //   console.warn(`resolveXYScales was unable to resolve both domains. xDomain: ${xDomain}, yDomain: ${yDomain}`);\n      // }\n\n      return { xDomain, yDomain };\n    }\n\n    _resolveTickDomain(\n      props,\n      Component,\n      { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale },\n    ) {\n      if (isFunction(Component.getTickDomain)) {\n        const componentTickDomains = Component.getTickDomain({\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale,\n          yScale,\n          ...props,\n        });\n        return omitNullUndefined(componentTickDomains);\n      }\n\n      if (React.Children.count(props.children)) {\n        const childrenTickDomains = mapOverChildren(\n          props.children,\n          this._resolveTickDomain.bind(this),\n          { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale },\n        );\n\n        const childrenXTickDomains = compact(\n          childrenTickDomains.map(\n            childTickDomains => childTickDomains.xTickDomain,\n          ),\n        );\n        const xTickDomain = childrenXTickDomains.length\n          ? combineDomains(\n              childrenXTickDomains,\n              dataTypeFromScaleType(xScaleType),\n            )\n          : undefined;\n\n        const childrenYTickDomains = compact(\n          childrenTickDomains.map(\n            childTickDomains => childTickDomains.yTickDomain,\n          ),\n        );\n        const yTickDomain = childrenYTickDomains.length\n          ? combineDomains(\n              childrenYTickDomains,\n              dataTypeFromScaleType(yScaleType),\n            )\n          : undefined;\n\n        return omitNullUndefined({ xTickDomain, yTickDomain });\n      }\n\n      return {};\n    }\n\n    _resolveMargin(\n      props,\n      Component,\n      { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale },\n    ) {\n      let { marginTop, marginBottom, marginLeft, marginRight } = props;\n\n      const isDone = () =>\n        [marginTop, marginBottom, marginLeft, marginRight].every(isNumber);\n\n      // short-circuit if all margins provided\n      if (isDone()) return { marginTop, marginBottom, marginLeft, marginRight };\n\n      // if Component provides a custom static getMargin method\n      // use it to determine remaining domains\n      if (isFunction(Component.getMargin)) {\n        const componentMargin = omitNullUndefined(\n          Component.getMargin({\n            ...props,\n            xScaleType,\n            yScaleType,\n            xDomain,\n            yDomain,\n            xScale,\n            yScale,\n          }),\n        );\n        ({ marginTop, marginBottom, marginLeft, marginRight } = Object.assign(\n          componentMargin,\n          omitNullUndefined({\n            marginTop,\n            marginBottom,\n            marginLeft,\n            marginRight,\n          }),\n        ));\n        if (isDone())\n          return { marginTop, marginBottom, marginLeft, marginRight };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their margins the same way,\n      // and combine them into a single margin, if there are multiple\n      if (React.Children.count(props.children)) {\n        const childrenMargins = mapOverChildren(\n          props.children,\n          this._resolveMargin.bind(this),\n          { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale },\n        );\n\n        // console.log('combining child margins', childMargins);\n        const childrenMargin = combineBorderObjects(\n          childrenMargins.map(childMargins => ({\n            top: childMargins.marginTop,\n            bottom: childMargins.marginBottom,\n            left: childMargins.marginLeft,\n            right: childMargins.marginRight,\n          })),\n        );\n\n        marginTop = isUndefined(marginTop) ? childrenMargin.top : marginTop;\n        marginBottom = isUndefined(marginBottom)\n          ? childrenMargin.bottom\n          : marginBottom;\n        marginLeft = isUndefined(marginLeft) ? childrenMargin.left : marginLeft;\n        marginRight = isUndefined(marginRight)\n          ? childrenMargin.right\n          : marginRight;\n      }\n\n      return { marginTop, marginBottom, marginLeft, marginRight };\n    }\n\n    _resolveSpacing(\n      props,\n      Component,\n      { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale },\n    ) {\n      let { spacingTop, spacingBottom, spacingLeft, spacingRight } = props;\n\n      const isDone = () =>\n        [spacingTop, spacingBottom, spacingLeft, spacingRight].every(isNumber);\n\n      // short-circuit if all spacing provided\n      if (isDone())\n        return { spacingTop, spacingBottom, spacingLeft, spacingRight };\n\n      // if Component provides a custom static getSpacing method\n      // use it to determine remaining domains\n      if (isFunction(Component.getSpacing)) {\n        const componentSpacing = omitNullUndefined(\n          Component.getSpacing({\n            ...props,\n            xScaleType,\n            yScaleType,\n            xDomain,\n            yDomain,\n            xScale,\n            yScale,\n          }),\n        );\n        ({\n          spacingTop,\n          spacingBottom,\n          spacingLeft,\n          spacingRight,\n        } = Object.assign(\n          componentSpacing,\n          omitNullUndefined({\n            spacingTop,\n            spacingBottom,\n            spacingLeft,\n            spacingRight,\n          }),\n        ));\n        if (isDone())\n          return { spacingTop, spacingBottom, spacingLeft, spacingRight };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their spacings the same way,\n      // and combine them into a single spacing, if there are multiple\n      if (React.Children.count(props.children)) {\n        const childrenSpacings = mapOverChildren(\n          props.children,\n          this._resolveSpacing.bind(this),\n          { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale },\n        );\n\n        const childrenSpacing = combineBorderObjects(\n          childrenSpacings.map(childSpacing => ({\n            top: childSpacing.spacingTop,\n            bottom: childSpacing.spacingBottom,\n            left: childSpacing.spacingLeft,\n            right: childSpacing.spacingRight,\n          })),\n        );\n\n        spacingTop = isUndefined(spacingTop) ? childrenSpacing.top : spacingTop;\n        spacingBottom = isUndefined(spacingBottom)\n          ? childrenSpacing.bottom\n          : spacingBottom;\n        spacingLeft = isUndefined(spacingLeft)\n          ? childrenSpacing.left\n          : spacingLeft;\n        spacingRight = isUndefined(spacingRight)\n          ? childrenSpacing.right\n          : spacingRight;\n      }\n\n      if (isDone())\n        return { spacingTop, spacingBottom, spacingLeft, spacingRight };\n    }\n\n    _makeScales = ({\n      width,\n      height,\n      xScaleType,\n      yScaleType,\n      invertXScale,\n      invertYScale,\n      xDomain,\n      yDomain,\n      xScale,\n      yScale,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight,\n    }) => {\n      const spacing = {\n        top: spacingTop,\n        bottom: spacingBottom,\n        left: spacingLeft,\n        right: spacingRight,\n      };\n      const margin = {\n        top: marginTop,\n        bottom: marginBottom,\n        left: marginLeft,\n        right: marginRight,\n      };\n      const innerChartWidth = innerWidth(width, margin);\n      const innerChartHeight = innerHeight(height, margin);\n\n      let xScaleResult = xScale;\n      let yScaleResult = yScale;\n\n      // use existing scales if provided, otherwise create new\n      if (!isValidScale(xScaleResult)) {\n        // innerRange functions produce range (i.e. [5,20]) and map function normalizes to 0 (i.e. [0,15])\n        const xRange = innerRangeX(innerChartWidth, spacing).map(\n          v => v - (spacing.left || 0),\n        );\n        xScaleResult = initScale(xScaleType)\n          .domain(xDomain)\n          .range(xRange);\n\n        // reverse scale domain if `invertXScale` is passed\n        if (invertXScale) {\n          xScaleResult.domain(xScaleResult.domain().reverse());\n        }\n      }\n\n      if (!isValidScale(yScale)) {\n        const yRange = innerRangeY(innerChartHeight, spacing).map(\n          v => v - (spacing.top || 0),\n        );\n        yScaleResult = initScale(yScaleType)\n          .domain(yDomain)\n          .range(yRange);\n\n        // reverse scale domain if `invertYScale` is passed\n        if (invertYScale) {\n          yScaleResult.domain(yScaleResult.domain().reverse());\n        }\n      }\n\n      return { xScale: xScaleResult, yScale: yScaleResult };\n    };\n\n    render() {\n      const { props } = this;\n      const { width, height, invertXScale, invertYScale } = props;\n\n      // scales not provided, so we have to resolve them\n      // first resolve scale types and domains\n      // const scaleType = this._resolveScaleType(props, ComposedComponent);\n      const { xScaleType, yScaleType } = this._resolveScaleType(\n        props,\n        ComposedComponent,\n      );\n\n      // const domain = this._resolveDomain(props, ComposedComponent, scaleType);\n      let { xDomain, yDomain } = this._resolveDomain(\n        props,\n        ComposedComponent,\n        xScaleType,\n        yScaleType,\n      );\n      if (invertXScale) xDomain = xDomain.slice().reverse();\n      if (invertYScale) yDomain = yDomain.slice().reverse();\n\n      // create a temporary scale with size & domain, which may be used by the Component to calculate margin/tickDomain\n      // (eg. to create and measure labels for the scales)\n      // let tempScale = this._makeScales(scaleOptions);\n      let scaleOptions = {\n        width,\n        height,\n        xScaleType,\n        yScaleType,\n        xDomain,\n        yDomain,\n        invertXScale,\n        invertYScale,\n        marginTop: props.marginTop,\n        marginBottom: props.marginBottom,\n        marginLeft: props.marginLeft,\n        marginRight: props.marginRight,\n        spacingTop: props.spacingTop,\n        spacingBottom: props.spacingBottom,\n        spacingLeft: props.spacingLeft,\n        spacingRight: props.spacingRight,\n        xScale: props.xScale,\n        yScale: props.yScale,\n      };\n      // create a temporary scale with size & domain, which may be used by the Component to calculate margin/tickDomain\n      // (eg. to create and measure labels for the scales)\n      let tempScale = this._makeScales(scaleOptions);\n      const { xScale: tempXScale, yScale: tempYScale } = tempScale;\n\n      // getTickDomain gives children the opportunity to modify the domain to include their scale ticks\n      // (can't happen in getDomain, because it can't be done until the base domain/tempScale has been created)\n      // nice-ing happens in the getTickDomain function inside of _resolveTickDomain\n      const { xTickDomain, yTickDomain } = this._resolveTickDomain(\n        props,\n        ComposedComponent,\n        {\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale: tempXScale,\n          yScale: tempYScale,\n        },\n      );\n      if (isValidDomain(xTickDomain, dataTypeFromScaleType(xScaleType))) {\n        xDomain = combineDomains(\n          [xDomain, xTickDomain],\n          dataTypeFromScaleType(xScaleType),\n        );\n      }\n      if (isValidDomain(yTickDomain, dataTypeFromScaleType(yScaleType))) {\n        yDomain = combineDomains(\n          [yDomain, yTickDomain],\n          dataTypeFromScaleType(yScaleType),\n        );\n      }\n\n      // update tempScale to use new domain before creating margins\n      scaleOptions = { ...scaleOptions, xDomain, yDomain };\n      tempScale = this._makeScales(scaleOptions);\n\n      // then resolve the margins\n      const { marginTop, marginBottom, marginLeft, marginRight } = defaults(\n        this._resolveMargin(props, ComposedComponent, {\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale: tempScale.xScale,\n          yScale: tempScale.yScale,\n        }),\n        {\n          marginTop: 0,\n          marginBottom: 0,\n          marginLeft: 0,\n          marginRight: 0,\n        },\n      );\n\n      const { spacingTop, spacingBottom, spacingLeft, spacingRight } = defaults(\n        this._resolveSpacing(props, ComposedComponent, {\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale: tempScale.xScale,\n          yScale: tempScale.yScale,\n        }),\n        {\n          spacingTop: 0,\n          spacingBottom: 0,\n          spacingLeft: 0,\n          spacingRight: 0,\n        },\n      );\n\n      // create real scales from resolved margins\n      scaleOptions = {\n        ...scaleOptions,\n        marginTop,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        spacingTop,\n        spacingBottom,\n        spacingLeft,\n        spacingRight,\n      };\n      const { xScale, yScale } = this._makeScales(scaleOptions);\n\n      const passedProps = Object.assign({}, this.props, {\n        xScale,\n        yScale,\n        xDomain,\n        yDomain,\n        xScaleType,\n        yScaleType,\n        marginTop,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        spacingTop,\n        spacingBottom,\n        spacingLeft,\n        spacingRight,\n      });\n      return <ComposedComponent {...passedProps} />;\n\n      // todo throw if cannot resolve scaleType\n      // todo throw if cannot resolve domain\n      // todo check to make sure margins didn't change after scales resolved?\n    }\n  };\n}\n"],"file":"resolveXYScales.js"}