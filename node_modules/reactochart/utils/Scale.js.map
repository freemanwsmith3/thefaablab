{"version":3,"sources":["../src/utils/Scale.js"],"names":["scaleTypeFromDataType","dataType","number","time","categorical","dataTypeFromScaleType","scaleType","linear","log","pow","ordinal","inferDataTypeFromDomain","domain","Array","isArray","Error","length","every","isNumber","isDate","inferScaleType","scale","ticks","base","exponent","initScale","isValidScale","range","hasXYScales","x","y","getScaleTicks","tickCount","getTickDomain","nice","scaleDomain","copy","identity","scaleEqual","scaleA","scaleB","indexOfClosestNumberInList","list","reduce","closestI","current","i","Math","abs","invertPointScale","rangeValue","rangePoints","map","domainValue","isDescending","reverse","nearestPointIndex"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport isDate from 'lodash/isDate';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport isEqual from 'lodash/isEqual';\nimport isNumber from 'lodash/isNumber';\nimport identity from 'lodash/identity';\nimport {\n  scaleLinear,\n  scaleTime,\n  scalePoint,\n  scaleLog,\n  scalePow,\n} from 'd3-scale';\n\nimport { combineDomains, domainFromData } from './Data';\n\nexport function scaleTypeFromDataType(dataType) {\n  return get(\n    {\n      number: 'linear',\n      time: 'time',\n      categorical: 'ordinal',\n    },\n    dataType,\n    'ordinal',\n  );\n}\n\nexport function dataTypeFromScaleType(scaleType) {\n  return get(\n    {\n      linear: 'number',\n      log: 'number',\n      pow: 'number',\n      time: 'time',\n      ordinal: 'categorical',\n    },\n    scaleType,\n    'categorical',\n  );\n}\n\nexport function inferDataTypeFromDomain(domain) {\n  if (!Array.isArray(domain))\n    throw new Error(\n      'invalid domain, inferDataTypeFromDomain cannot infer data type',\n    );\n\n  return domain.length !== 2\n    ? 'categorical'\n    : domain.every(isNumber)\n    ? 'number'\n    : domain.every(isDate)\n    ? 'time'\n    : 'categorical';\n}\n\nexport function inferScaleType(scale) {\n  return !scale.ticks\n    ? 'ordinal'\n    : isDate(scale.domain()[0])\n    ? 'time'\n    : scale.base\n    ? 'log'\n    : scale.exponent\n    ? 'pow'\n    : 'linear';\n}\n\nexport function initScale(scaleType) {\n  switch (scaleType) {\n    case 'linear':\n      return scaleLinear();\n    case 'time':\n      return scaleTime();\n    case 'ordinal':\n      return scalePoint();\n    case 'log':\n      return scaleLog();\n    case 'pow':\n      return scalePow();\n    default:\n      return;\n  }\n}\n\nexport function isValidScale(scale) {\n  return (\n    isFunction(scale) && isFunction(scale.domain) && isFunction(scale.range)\n  );\n}\n\nexport function hasXYScales(scale) {\n  return isObject(scale) && isValidScale(scale.x) && isValidScale(scale.y);\n}\n\nexport function getScaleTicks(scale, scaleType, tickCount = 10) {\n  return (scaleType || inferScaleType(scale)) === 'ordinal'\n    ? scale.domain()\n    : scale.ticks(tickCount);\n}\n\nexport function getTickDomain(scale, { ticks, tickCount, nice } = {}) {\n  const scaleType = inferScaleType(scale);\n  const scaleDomain = scale.domain();\n\n  if (nice && scaleType !== 'ordinal') {\n    // If nicing, initialize a new scale and nice it\n    // eslint-disable-next-line no-param-reassign\n    scale = scale\n      .copy()\n      .domain(scaleDomain)\n      .nice(tickCount || 10);\n  }\n\n  if (Array.isArray(ticks)) {\n    return combineDomains([\n      scale.domain(),\n      domainFromData(ticks, identity, dataTypeFromScaleType(scaleType)),\n    ]);\n  } else if (nice && scaleType !== 'ordinal') return scale.domain();\n  // return undefined by default, if we have no options pertaining to ticks\n}\n\nexport function scaleEqual(scaleA, scaleB) {\n  return !isValidScale(scaleA) || !isValidScale(scaleB)\n    ? scaleA === scaleB // safe fallback\n    : // check scale equality\n      isEqual(scaleA.domain(), scaleB.domain()) &&\n        isEqual(scaleA.range(), scaleB.range());\n}\n\nexport function indexOfClosestNumberInList(number, list) {\n  return list.reduce((closestI, current, i) => {\n    return Math.abs(current - number) < Math.abs(list[closestI] - number)\n      ? i\n      : closestI;\n  }, 0);\n}\n\nexport function invertPointScale(scale, rangeValue) {\n  const domain = scale.domain();\n\n  // shim until d3.scalePoint.invert() is implemented for real\n  // given a value from the output range, returns the *nearest* corresponding value in the input domain\n  const rangePoints = domain.map(domainValue => scale(domainValue));\n\n  if (rangePoints.length <= 1) {\n    return domain[0];\n  }\n\n  const isDescending = rangePoints[0] > rangePoints[1];\n\n  if (isDescending) {\n    domain.reverse();\n    rangePoints.reverse();\n  }\n\n  const nearestPointIndex = indexOfClosestNumberInList(rangeValue, rangePoints);\n\n  return domain[nearestPointIndex];\n}\n"],"file":"Scale.js"}