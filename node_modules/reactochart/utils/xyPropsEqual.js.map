{"version":3,"sources":["../src/utils/xyPropsEqual.js"],"names":["defaultPropKeysToDeepCheck","xyPropsEqual","propsA","propsB","customKeysToDeepCheck","includeDefaults","propKeysToDeepCheck","concat","propKeysToSkipShallowCheck","equalityCheck","every","key","xyPropsEqualDebug","result","isDeepEqual","console","log","isScaleEqual","scale"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACO,MAAMA,0BAA0B,GAAG,CACxC,QADwC,EAExC,WAFwC,EAGxC,SAHwC,EAIxC,QAJwC,EAKxC,OALwC,EAMxC,MANwC,CAMhC;AANgC,CAAnC;;;AASQ,SAASC,YAAT,CACbC,MADa,EAEbC,MAFa,EAGbC,qBAAqB,GAAG,EAHX,EAIbC,eAAe,GAAG,IAJL,EAKb;AACA,QAAMC,mBAAmB,GAAGD,eAAe,GACvCL,0BAA0B,CAACO,MAA3B,CAAkCH,qBAAlC,CADuC,GAEvCA,qBAFJ;AAIA,QAAMI,0BAA0B,GAAGF,mBAAmB,CAACC,MAApB,CAA2B,OAA3B,CAAnC;AAEA,QAAME,aAAa,GACjB;AACA,6BACE,mBAAKP,MAAL,EAAaM,0BAAb,CADF,EAEE,mBAAKL,MAAL,EAAaK,0BAAb,CAFF,KAIAF,mBAAmB,CAACI,KAApB,CAA0BC,GAAG,IAAI,sBAAQT,MAAM,CAACS,GAAD,CAAd,EAAqBR,MAAM,CAACQ,GAAD,CAA3B,CAAjC,CAJA,IAKA,CAAC,GAAD,EAAM,GAAN,EAAWD,KAAX,CAAiBC,GAAG,IAAI;AACtB,WAAO,uBACL,kBAAIT,MAAJ,EAAa,SAAQS,GAAI,GAAzB,CADK,EAEL,kBAAIT,MAAJ,EAAa,SAAQS,GAAI,GAAzB,CAFK,CAAP;AAID,GALD,CAPF;AAcA,SAAOF,aAAP;AACD;AAED;;;AACO,SAASG,iBAAT,CACLV,MADK,EAELC,MAFK,EAGLC,qBAAqB,GAAG,EAHnB,EAILC,eAAe,GAAG,IAJb,EAKL;AACA,QAAMC,mBAAmB,GAAGD,eAAe,GACvCL,0BAA0B,CAACO,MAA3B,CAAkCH,qBAAlC,CADuC,GAEvCA,qBAFJ,CADA,CAIA;AACA;;AACA,QAAMI,0BAA0B,GAAGF,mBAAmB,CAACC,MAApB,CAA2B,OAA3B,CAAnC;AAEA,QAAMM,MAAM,GACV;AACA,6BACE,mBAAKX,MAAL,EAAaM,0BAAb,CADF,EAEE,mBAAKL,MAAL,EAAaK,0BAAb,CAFF,KAIAF,mBAAmB,CAACI,KAApB,CAA0BC,GAAG,IAAI;AAC/B,UAAMG,WAAW,GAAG,sBAAQZ,MAAM,CAACS,GAAD,CAAd,EAAqBR,MAAM,CAACQ,GAAD,CAA3B,CAApB;AACA,QAAI,CAACG,WAAL,EAAkBC,OAAO,CAACC,GAAR,CAAa,YAAWL,GAAI,YAA5B;AAClB,WAAOG,WAAP;AACD,GAJD,CAJA,IASA,CAAC,GAAD,EAAM,GAAN,EAAWJ,KAAX,CAAiBC,GAAG,IAAI;AACtB,UAAMM,YAAY,GAAG,uBAAWf,MAAM,CAACgB,KAAP,CAAaP,GAAb,CAAX,EAA8BR,MAAM,CAACe,KAAP,CAAaP,GAAb,CAA9B,CAArB;AACA,QAAI,CAACM,YAAL,EAAmBF,OAAO,CAACC,GAAR,CAAa,kBAAiBL,GAAI,YAAlC;AACnB,WAAOM,YAAP;AACD,GAJD,CAXF,CARA,CAyBA;AACA;;AACA,SAAOJ,MAAP;AACD;AACD","sourcesContent":["import omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport get from 'lodash/get';\nimport shallowEqual from './shallowEqual';\nimport { scaleEqual } from './Scale';\n\n// xyPropsEqual is a function used by XYPlot-type charts,\n// in their `shouldComponentUpdate` methods, for determining whether next props are the same as previous props.\n// in a perfect world this would just be a simple shallow equality check,\n// however some props are almost always passed as object/array literals (so they never ===)\n// or require special equality checks (eg. d3 scales)\n\n// default list of props to check for *deep equality* using _.isEqual\n// can be overridden by components by passing `propKeysToDeepCheck` argument\n// todo: decide whether data really belongs on this list? deep-checking data can be slow, but re-rendering is even slower\nexport const defaultPropKeysToDeepCheck = [\n  'margin',\n  'scaleType',\n  'spacing',\n  'domain',\n  'style',\n  'data', // not worth deepchecking data due to perf issues\n];\n\nexport default function xyPropsEqual(\n  propsA,\n  propsB,\n  customKeysToDeepCheck = [],\n  includeDefaults = true,\n) {\n  const propKeysToDeepCheck = includeDefaults\n    ? defaultPropKeysToDeepCheck.concat(customKeysToDeepCheck)\n    : customKeysToDeepCheck;\n\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat('scale');\n\n  const equalityCheck =\n    // most keys just get shallow-equality checked\n    shallowEqual(\n      omit(propsA, propKeysToSkipShallowCheck),\n      omit(propsB, propKeysToSkipShallowCheck),\n    ) &&\n    propKeysToDeepCheck.every(key => isEqual(propsA[key], propsB[key])) &&\n    ['x', 'y'].every(key => {\n      return scaleEqual(\n        get(propsA, `scale[${key}]`),\n        get(propsA, `scale[${key}]`),\n      );\n    });\n\n  return equalityCheck;\n}\n\n/* eslint-disable */\nexport function xyPropsEqualDebug(\n  propsA,\n  propsB,\n  customKeysToDeepCheck = [],\n  includeDefaults = true,\n) {\n  const propKeysToDeepCheck = includeDefaults\n    ? defaultPropKeysToDeepCheck.concat(customKeysToDeepCheck)\n    : customKeysToDeepCheck;\n  // debug version of xyPropsEqual which console.logs, for figuring out which props are failing equality check\n  // const start = performance.now();\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat('scale');\n\n  const result =\n    // most keys just get shallow-equality checked\n    shallowEqual(\n      omit(propsA, propKeysToSkipShallowCheck),\n      omit(propsB, propKeysToSkipShallowCheck),\n    ) &&\n    propKeysToDeepCheck.every(key => {\n      const isDeepEqual = isEqual(propsA[key], propsB[key]);\n      if (!isDeepEqual) console.log(`xyProps: ${key} not equal`);\n      return isDeepEqual;\n    }) &&\n    ['x', 'y'].every(key => {\n      const isScaleEqual = scaleEqual(propsA.scale[key], propsB.scale[key]);\n      if (!isScaleEqual) console.log(`xyProps: scale.${key} not equal`);\n      return isScaleEqual;\n    });\n\n  // console.log('xyProps isEqual', isEqual);\n  // console.log('took', performance.now() - start);\n  return result;\n}\n/* eslint-enable */\n"],"file":"xyPropsEqual.js"}