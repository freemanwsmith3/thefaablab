"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AriaLabelContainer;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Array = require("d3-array");

var CustomPropTypes = _interopRequireWildcard(require("./utils/CustomPropTypes"));

var _Data = require("./utils/Data");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

AriaLabelContainer.propTypes = {
  /**
   * An array containing n objects in the following shape:
   * [{
   *    data: Array of your data points, normally used in rendering specific line or area charts
   *    accessor: A function used to access the data point on the x axis from the `data` attribute
   *              (datum) => number
   * }]
   */
  datasetWithAccessor: _propTypes.default.arrayOf(_propTypes.default.shape({
    data: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
    accessor: CustomPropTypes.valueOrAccessor.isRequired
  })).isRequired,

  /**
   * A function that takes the xValue at the start of the frame, an array of datapoints at that xValue, and the index of the frame,
   * and returns a string to render as an aria label
   * for the specific frame in the Interface.
   *
   * (xValue, [datapoints], frameIndex) => string
   */
  ariaLabelGenerator: _propTypes.default.func.isRequired,

  /**
   * an optional `onKeyDown` event handler to provide for each frame
   * when selected.
   * Best practices are to describe how the user will interact with the chart in
   * the ariaLabelGenerator
   *
   * (event, xValue, [datapoints]) => void
   */
  onKeyDown: _propTypes.default.func,

  /**
   * height of the chart - provided by `XYPlot`
   */
  height: _propTypes.default.number,

  /**
   * width of the chart - provided by `XYPlot`
   */
  width: _propTypes.default.number,

  /**
   * D3 scale for X axis - provided by XYPlot
   */
  xScale: _propTypes.default.func
};
/**
 * `AriaLabelContainer` provides a mechanism for keyboard navigation of
 * `LineChart` and `AreaChart` graphs within `XYPlot`. This component renders
 * a rectangle for a given `numFrames` across a Line/Area chart. `numFrames` should
 * be equal to the number of data points in your dataset. Users can navigate to a frame
 * either by pressing `Tab`, or through their assistive technology. `AriaLabelContainer`
 * takes an `ariaLabelGenerator`, which generates an aria-label for each frame of the chart.
 * [aria-labels](https://www.w3.org/TR/WCAG20-TECHS/ARIA6.html#ARIA6-description) are critical for users accessing
 * the web with screenreaders or other assistive technologies.
 */

function AriaLabelContainer(props) {
  const {
    ariaLabelGenerator,
    onKeyDown,
    height,
    width,
    datasetWithAccessor,
    xScale
  } = props;
  const domain = xScale.domain();
  const groupedData = {}; // determine number of frames from n datasets with potentially different accessors

  datasetWithAccessor.forEach(({
    data,
    accessor
  }, index) => {
    data.forEach(d => {
      const xValue = (0, _Data.getValue)(accessor, d);
      const key = xValue.toString();

      if (!groupedData[key]) {
        groupedData[key] = {
          xValue,
          data: new Array(datasetWithAccessor.length) // account for missing datapoints in different datasets

        };
      }

      groupedData[key].data[index] = d;
    });
  });
  const zippedDatapoints = Object.values(groupedData).sort((a, b) => (0, _d3Array.ascending)(a.xValue, b.xValue));
  const numFrames = zippedDatapoints.length;
  const sliceWidth = width / (numFrames - 1);
  return /*#__PURE__*/_react.default.createElement("g", {
    className: "rct-chart-a11y"
  }, zippedDatapoints.map(({
    xValue,
    data
  }, index) => /*#__PURE__*/_react.default.createElement("rect", {
    className: "rct-chart-visually-hidden-rect",
    "aria-label": ariaLabelGenerator(xValue, data, index),
    key: index,
    height: height,
    width: sliceWidth,
    x: xValue === domain[1] ? xScale(zippedDatapoints[index - 1].xValue) : xScale(xValue) // otherwise the last rect renders outside the chart
    ,
    y: 0,
    role: "button",
    tabIndex: 0,
    onKeyDown: event => {
      if (!!onKeyDown) {
        onKeyDown(event, xValue, data);
      }
    }
  })));
}
//# sourceMappingURL=AriaLabelContainer.js.map