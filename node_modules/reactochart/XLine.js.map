{"version":3,"sources":["src/XLine.js"],"names":["XLine","React","Component","render","xScale","value","yScale","yLimit","yDomain","height","style","spacingTop","spacingBottom","props","className","lineX","y1","y2","x1","x2","PropTypes","number","func","oneOfType","string","instanceOf","Date","isRequired","array","object"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;AAGe,MAAMA,KAAN,SAAoBC,eAAMC,SAA1B,CAAoC;AAoDjDC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,MAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA,MANI;AAOJC,MAAAA,KAPI;AAQJC,MAAAA,UARI;AASJC,MAAAA;AATI,QAUF,KAAKC,KAVT;AAWA,UAAMC,SAAS,GAAI,oBAAmB,KAAKD,KAAL,CAAWC,SAAU,EAA3D;AACA,UAAMC,KAAK,GAAGX,MAAM,CAACC,KAAD,CAApB;AAEA,QAAIW,EAAE,GAAG,CAACL,UAAV;AACA,QAAIM,EAAE,GAAGR,MAAM,GAAGG,aAAlB;;AAEA,QAAI,OAAOL,MAAP,KAAkB,WAAtB,EAAmC;AACjCS,MAAAA,EAAE,GAAGV,MAAM,CAACE,OAAO,CAAC,CAAD,CAAR,CAAN,GAAqBI,aAA1B;AACAK,MAAAA,EAAE,GAAGX,MAAM,CAACC,MAAD,CAAX;AACD;;AAED,wBACE;AACE,qBAAY;AADd,OAEM;AACFW,MAAAA,EAAE,EAAEH,KADF;AAEFI,MAAAA,EAAE,EAAEJ,KAFF;AAGFC,MAAAA,EAAE,EAAEA,EAHF;AAIFC,MAAAA,EAAE,EAAEA,EAJF;AAKFH,MAAAA,SALE;AAMFJ,MAAAA;AANE,KAFN,EADF;AAaD;;AAxFgD;;;;gBAA9BV,K,eACA;AACjB;;;AAGAS,EAAAA,MAAM,EAAEW,mBAAUC,MAJD;;AAKjB;;;AAGAjB,EAAAA,MAAM,EAAEgB,mBAAUE,IARD;AASjBjB,EAAAA,KAAK,EAAEe,mBAAUG,SAAV,CAAoB,CACzBH,mBAAUC,MADe,EAEzBD,mBAAUI,MAFe,EAGzBJ,mBAAUK,UAAV,CAAqBC,IAArB,CAHyB,CAApB,EAIJC,UAbc;;AAcjB;;;AAGArB,EAAAA,MAAM,EAAEc,mBAAUE,IAjBD;AAkBjBf,EAAAA,MAAM,EAAEa,mBAAUG,SAAV,CAAoB,CAC1BH,mBAAUC,MADgB,EAE1BD,mBAAUI,MAFgB,EAG1BJ,mBAAUK,UAAV,CAAqBC,IAArB,CAH0B,CAApB,CAlBS;;AAuBjB;;;AAGAlB,EAAAA,OAAO,EAAEY,mBAAUQ,KA1BF;;AA2BjB;;;AAGAjB,EAAAA,UAAU,EAAES,mBAAUC,MA9BL;;AA+BjB;;;AAGAT,EAAAA,aAAa,EAAEQ,mBAAUC,MAlCR;;AAmCjB;;;AAGAX,EAAAA,KAAK,EAAEU,mBAAUS,MAtCA;;AAuCjB;;;AAGAf,EAAAA,SAAS,EAAEM,mBAAUI;AA1CJ,C;;gBADAxB,K,kBA6CG;AACpBU,EAAAA,KAAK,EAAE,EADa;AAEpBI,EAAAA,SAAS,EAAE,EAFS;AAGpBH,EAAAA,UAAU,EAAE,CAHQ;AAIpBC,EAAAA,aAAa,EAAE;AAJK,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\n/**\n * `XLine` is a vertical line rendered on the x axis\n */\nexport default class XLine extends React.Component {\n  static propTypes = {\n    /**\n     * Height of chart - provided by XYPlot\n     */\n    height: PropTypes.number,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    value: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    yLimit: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]),\n    /**\n     * The Y domain of the data as an array - provided by XYPlot\n     */\n    yDomain: PropTypes.array,\n    /**\n     * Spacing top - provided by XYPlot\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Spacing bottom - provided by XYPlot\n     */\n    spacingBottom: PropTypes.number,\n    /**\n     * Inline style object to be applied to the line\n     */\n    style: PropTypes.object,\n    /**\n     * Class attribute to be applied to the line\n     */\n    className: PropTypes.string,\n  };\n  static defaultProps = {\n    style: {},\n    className: '',\n    spacingTop: 0,\n    spacingBottom: 0,\n  };\n\n  render() {\n    const {\n      xScale,\n      value,\n      yScale,\n      yLimit,\n      yDomain,\n      height,\n      style,\n      spacingTop,\n      spacingBottom,\n    } = this.props;\n    const className = `rct-chart-line-x ${this.props.className}`;\n    const lineX = xScale(value);\n\n    let y1 = -spacingTop;\n    let y2 = height + spacingBottom;\n\n    if (typeof yLimit !== 'undefined') {\n      y1 = yScale(yDomain[0]) + spacingBottom;\n      y2 = yScale(yLimit);\n    }\n\n    return (\n      <line\n        aria-hidden=\"true\"\n        {...{\n          x1: lineX,\n          x2: lineX,\n          y1: y1,\n          y2: y2,\n          className,\n          style,\n        }}\n      />\n    );\n  }\n}\n"],"file":"XLine.js"}