{"version":3,"sources":["src/ColorHeatmap.js"],"names":["interpolatorFromType","type","toLowerCase","interpolateHcl","interpolateHsl","interpolateLab","interpolateRgb","makeColorScale","domain","colors","interpolator","interpolatorForColorScale","range","interpolate","ColorHeatmap","React","Component","getDomain","props","xScaleType","yScaleType","data","x","xEnd","y","yEnd","shouldComponentUpdate","nextProps","shouldUpdate","render","xScale","yScale","value","rectStyle","rectClassName","valueAccessor","colorScale","valueDomain","length","map","d","i","color","style","fill","className","key","PropTypes","array","isRequired","CustomPropTypes","valueOrAccessor","func","string","oneOfType","object"],"mappings":"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","sourcesContent":["import {\n  interpolateHcl,\n  interpolateHsl,\n  interpolateLab,\n  interpolateRgb,\n} from 'd3-interpolate';\nimport { scaleLinear } from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport isString from 'lodash/isString';\nimport times from 'lodash/times';\nimport range from 'lodash/range';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport RangeRect from './RangeRect';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport {\n  domainFromData,\n  domainFromRangeData,\n  getValue,\n  makeAccessor2,\n} from './utils/Data';\nimport { dataTypeFromScaleType } from './utils/Scale';\nimport xyPropsEqual from './utils/xyPropsEqual';\n\nfunction interpolatorFromType(type) {\n  switch (type.toLowerCase()) {\n    case 'hcl':\n      return interpolateHcl;\n    case 'hsl':\n      return interpolateHsl;\n    case 'lab':\n      return interpolateLab;\n    case 'rgb':\n      return interpolateRgb;\n    default:\n      return interpolateLab;\n  }\n}\n\nfunction makeColorScale(domain, colors, interpolator) {\n  let interpolatorForColorScale = interpolator;\n\n  if (isString(interpolatorForColorScale)) {\n    interpolatorForColorScale = interpolatorFromType(interpolator);\n  }\n\n  return scaleLinear()\n    .domain(domain)\n    .range(colors)\n    .interpolate(interpolatorForColorScale);\n}\n\n/**\n * `ColorHeatmap` can be used to represent individual values contained in a matrix through colors.\n */\nexport default class ColorHeatmap extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted - should be 1D array of all grid values\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for the value of the datum, called once per datum, or a\n     * single value to be used for all data.\n     */\n    value: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for x values, called once per datum, or a\n     * single value to be used for all `x` data.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for x end values, called once per datum, or a\n     * single value to be used for all `xEnd` data.\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for y values, called once per datum, or a\n     * single value to be used for all `y` data.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for y end values, called once per datum, or a\n     * single value to be used for all `yEnd` data.\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * A d3 color scale or function which receives the datum value as an argument.\n     * This will be constructred from the `colors`, `valueDomain` and\n     * `interpolator` props, if `colorScale` is undefined.\n     */\n    colorScale: PropTypes.func,\n    /**\n     * An array of color strings\n     */\n    colors: PropTypes.array,\n    /**\n     * Custom domain of the data.\n     * Otherwise it will be the extent of your data.\n     */\n    valueDomain: PropTypes.array,\n    /**\n     * Interpolator for colors. Possible options include \"hcl\", \"hsl\", \"lab\" and \"rgb\"\n     */\n    interpolator: PropTypes.string,\n    /**\n     * Inline style object to be applied to each rect,\n     * or accessor function which returns a style object.\n     */\n    rectStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each rect,\n     * or accessor function which returns a class.\n     */\n    rectClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  };\n  static defaultProps = {\n    interpolator: 'lab',\n    rectStyle: {},\n    rectClassName: '',\n  };\n\n  static getDomain(props) {\n    const { xScaleType, yScaleType, data, x, xEnd, y, yEnd } = props;\n    return {\n      x: domainFromRangeData(\n        data,\n        makeAccessor2(x),\n        makeAccessor2(xEnd),\n        dataTypeFromScaleType(xScaleType),\n      ),\n      y: domainFromRangeData(\n        data,\n        makeAccessor2(y),\n        makeAccessor2(yEnd),\n        dataTypeFromScaleType(yScaleType),\n      ),\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\n      'colors',\n      'valueDomain',\n    ]);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      data,\n      xScale,\n      yScale,\n      value,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      interpolator,\n      rectStyle,\n      rectClassName,\n    } = this.props;\n    const valueAccessor = makeAccessor2(value);\n    let colorScale;\n\n    if (this.props.colorScale) {\n      colorScale = this.props.colorScale;\n    } else {\n      const valueDomain =\n        this.props.valueDomain || domainFromData(data, valueAccessor);\n      const colors =\n        this.props.colors ||\n        (valueDomain.length === 2\n          ? ['#000000', '#ffffff']\n          : times(valueDomain.length, schemeCategory10().domain(range(10))));\n      colorScale = makeColorScale(valueDomain, colors, interpolator);\n    }\n\n    return (\n      <g className=\"rct-color-heatmap-chart\" aria-hidden=\"true\">\n        {data.map((d, i) => {\n          const color = colorScale(valueAccessor(d));\n          const style = { ...getValue(rectStyle, d, i), fill: color };\n          const className = `${getValue(rectClassName, d, i)}`;\n          const key = `heatmap-rect-${i}`;\n          return (\n            <RangeRect\n              x={getValue(x, d, i)}\n              xEnd={getValue(xEnd, d, i)}\n              y={getValue(y, d, i)}\n              yEnd={getValue(yEnd, d, i)}\n              {...{ xScale, yScale, style, className, key }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"ColorHeatmap.js"}