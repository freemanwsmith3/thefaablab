{"version":3,"sources":["src/TreeMap.js"],"names":["TreeMap","React","Component","initTreemap","rootNode","tree","options","getValue","sort","treeRoot","sum","d","descendants","getStateFromProps","props","getTree","getRootNode","data","prevProps","getDerivedStateFromProps","newProps","state","width","height","sticky","JSON","stringify","constructor","render","nodeStyle","labelStyle","getLabel","minLabelWidth","minLabelHeight","onClickNode","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","NodeComponent","NodeLabelComponent","nodes","style","position","parentNames","map","node","i","key","PropTypes","number","isRequired","object","CustomPropTypes","getter","getChildren","func","padding","round","bool","ratio","oneOfType","TreeMapNode","TreeMapNodeLabel","tiling","treemapResquarify","tile","size","paddingOuter"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA;;;AAGA,MAAMA,OAAN,SAAsBC,eAAMC,SAA5B,CAAsC;AA4FpC,SAAOC,WAAP,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmCC,OAAnC,EAA4C;AAC1C;AACA;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqBF,OAA3B;AACA,UAAMG,QAAQ,GAAGL,QAAQ,CAACM,GAAT,CAAaC,CAAC,IAAI;AACjC,UAAI,yBAAWJ,QAAX,CAAJ,EAA0B,OAAOA,QAAQ,CAACI,CAAD,CAAf,CAA1B,KACK,IAAI,uBAASJ,QAAT,CAAJ,EAAwB,OAAOI,CAAC,CAACJ,QAAD,CAAR;AAC7B,aAAO,CAAP;AACD,KAJgB,CAAjB;AAKA,WAAOF,IAAI,CAACG,IAAI,GAAGC,QAAQ,CAACD,IAAT,CAAcA,IAAd,CAAH,GAAyBC,QAA9B,CAAJ,CAA4CG,WAA5C,EAAP;AACD;;AAED,SAAOC,iBAAP,CAAyBC,KAAzB,EAAgC;AAC9B,UAAMT,IAAI,GAAGU,OAAO,CAACD,KAAD,CAApB;AACA,UAAMV,QAAQ,GAAGY,WAAW,CAAC,wBAAUF,KAAK,CAACG,IAAhB,CAAD,EAAwBH,KAAxB,CAA5B;AACA,UAAMI,SAAS,GAAG,wBAAUJ,KAAV,CAAlB;AACA,WAAO;AAAET,MAAAA,IAAF;AAAQD,MAAAA,QAAR;AAAkBc,MAAAA;AAAlB,KAAP;AACD;;AAED,SAAOC,wBAAP,CAAgCC,QAAhC,EAA0CC,KAA1C,EAAiD;AAC/C,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBN,MAAAA,IAAjB;AAAuBO,MAAAA;AAAvB,QAAkCH,KAAK,CAACH,SAA9C,CAD+C,CAG/C;AACA;;AACA,QACE,CAACM,MAAD,IACAF,KAAK,KAAKF,QAAQ,CAACE,KADnB,IAEAC,MAAM,KAAKH,QAAQ,CAACG,MAFpB,IAGAE,IAAI,CAACC,SAAL,CAAeT,IAAf,MAAyBQ,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACH,IAAxB,CAJ3B,EAKE;AACA,aAAOjB,OAAO,CAACa,iBAAR,CAA0BO,QAA1B,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDO,EAAAA,WAAW,CAACb,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKO,KAAL,GAAarB,OAAO,CAACa,iBAAR,CAA0BC,KAA1B,CAAb;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,UAAM;AACJN,MAAAA,KADI;AAEJC,MAAAA,MAFI;AAGJM,MAAAA,SAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,aANI;AAOJC,MAAAA,cAPI;AAQJC,MAAAA,WARI;AASJC,MAAAA,gBATI;AAUJC,MAAAA,gBAVI;AAWJC,MAAAA,eAXI;AAYJC,MAAAA,aAZI;AAaJC,MAAAA;AAbI,QAcF,KAAKzB,KAdT;AAgBA,UAAM;AAAEV,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqB,KAAKgB,KAAhC;AAEA,UAAMmB,KAAK,GAAGxC,OAAO,CAACG,WAAR,CAAoBC,QAApB,EAA8BC,IAA9B,EAAoC,KAAKS,KAAzC,CAAd;AAEA,UAAM2B,KAAK,GAAG;AAAEC,MAAAA,QAAQ,EAAE,UAAZ;AAAwBpB,MAAAA,KAAxB;AAA+BC,MAAAA;AAA/B,KAAd;AAEA,UAAMoB,WAAW,GAAG,mBAAK,kBAAIH,KAAJ,EAAW,kBAAX,CAAL,CAApB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf,OAAkC;AAAEC,MAAAA;AAAF,KAAlC,GACGD,KAAK,CAACI,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBACT,6BAAC,aAAD,EACM;AACFD,MAAAA,IADE;AAEFhB,MAAAA,SAFE;AAGFG,MAAAA,aAHE;AAIFC,MAAAA,cAJE;AAKFH,MAAAA,UALE;AAMFC,MAAAA,QANE;AAOFY,MAAAA,WAPE;AAQFJ,MAAAA,kBARE;AASFL,MAAAA,WATE;AAUFC,MAAAA,gBAVE;AAWFC,MAAAA,gBAXE;AAYFC,MAAAA,eAZE;AAaFU,MAAAA,GAAG,EAAG,QAAOD,CAAE;AAbb,KADN,CADD,CADH,CADF;AAuBD;;AAtLmC;;gBAAhC9C,O,eACe;AACjBsB,EAAAA,KAAK,EAAE0B,mBAAUC,MAAV,CAAiBC,UADP;AAEjB3B,EAAAA,MAAM,EAAEyB,mBAAUC,MAAV,CAAiBC,UAFR;;AAGjB;;;;AAIAjC,EAAAA,IAAI,EAAE+B,mBAAUG,MAAV,CAAiBD,UAPN;;AAQjB;;;AAGA3C,EAAAA,QAAQ,EAAE6C,eAAe,CAACC,MAXT;;AAYjB;;;AAGAC,EAAAA,WAAW,EAAEF,eAAe,CAACC,MAfZ;;AAgBjB;;;AAGAtB,EAAAA,QAAQ,EAAEqB,eAAe,CAACC,MAnBT;;AAqBjB;;;AAGA7C,EAAAA,IAAI,EAAEwC,mBAAUO,IAxBC;AAyBjB;;AACA;;;AAGAC,EAAAA,OAAO,EAAER,mBAAUC,MA7BF;;AA8BjB;;;AAGAQ,EAAAA,KAAK,EAAET,mBAAUU,IAjCA;;AAkCjB;;;;AAIAlC,EAAAA,MAAM,EAAEwB,mBAAUU,IAtCD;;AAuCjB;;;AAGAC,EAAAA,KAAK,EAAEX,mBAAUC,MA1CA;;AA4CjB;;;;AAIApB,EAAAA,SAAS,EAAEmB,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUO,IAAX,EAAiBP,mBAAUG,MAA3B,CAApB,CAhDM;;AAiDjB;;;;AAIArB,EAAAA,UAAU,EAAEkB,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUO,IAAX,EAAiBP,mBAAUG,MAA3B,CAApB,CArDK;AAsDjBnB,EAAAA,aAAa,EAAEgB,mBAAUC,MAtDR;AAuDjBhB,EAAAA,cAAc,EAAEe,mBAAUC,MAvDT;;AAwDjB;;;AAGAf,EAAAA,WAAW,EAAEc,mBAAUO,IA3DN;;AA4DjB;;;AAGApB,EAAAA,gBAAgB,EAAEa,mBAAUO,IA/DX;;AAgEjB;;;AAGAnB,EAAAA,gBAAgB,EAAEY,mBAAUO,IAnEX;;AAoEjB;;;AAGAlB,EAAAA,eAAe,EAAEW,mBAAUO,IAvEV;;AAwEjB;;;AAGAjB,EAAAA,aAAa,EAAEU,mBAAUO,IA3ER;;AA4EjB;;;AAGAhB,EAAAA,kBAAkB,EAAES,mBAAUO;AA/Eb,C;;gBADfvD,O,kBAkFkB;AACpBO,EAAAA,QAAQ,EAAE,OADU;AAEpB+C,EAAAA,WAAW,EAAE,UAFO;AAGpBvB,EAAAA,QAAQ,EAAE,MAHU;AAIpBC,EAAAA,aAAa,EAAE,CAJK;AAKpBC,EAAAA,cAAc,EAAE,CALI;AAMpBK,EAAAA,aAAa,EAAEuB,oBANK;AAOpBtB,EAAAA,kBAAkB,EAAEuB;AAPA,C;;AAuGxB,SAAS9C,WAAT,CAAqBC,IAArB,EAA2BX,OAA3B,EAAoC;AAClC,QAAM;AAAEgD,IAAAA;AAAF,MAAkBhD,OAAxB;AACA,SAAO,4BAAUW,IAAV,EAAgB,wBAAaqC,WAAb,CAAhB,CAAP;AACD;;AAED,SAASvC,OAAT,CAAiBT,OAAjB,EAA0B;AACxB,QAAM;AAAEgB,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBoC,IAAAA,KAAjB;AAAwBF,IAAAA,KAAxB;AAA+BD,IAAAA;AAA/B,MAA2ClD,OAAjD;AACA,QAAMyD,MAAM,GAAG,CAAC,0BAAYJ,KAAZ,CAAD,GACXK,+BAAkBL,KAAlB,CAAwBA,KAAxB,CADW,GAEXK,8BAFJ;AAGA,QAAM3D,IAAI,GAAG,4BACV4D,IADU,CACLF,MADK,EAEVG,IAFU,CAEL,CAAC5C,KAAD,EAAQC,MAAR,CAFK,CAAb;AAGA,MAAI,CAAC,0BAAYiC,OAAZ,CAAL,EAA2BnD,IAAI,CAAC8D,YAAL,CAAkBX,OAAlB;AAC3B,MAAI,CAAC,0BAAYC,KAAZ,CAAL,EAAyBpD,IAAI,CAACoD,KAAL,CAAWA,KAAX;AACzB,SAAOpD,IAAP;AACD;;eAEcL,O","sourcesContent":["import { hierarchy, treemap, treemapResquarify } from 'd3-hierarchy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport uniq from 'lodash/uniq';\nimport map from 'lodash/map';\nimport isUndefined from 'lodash/isUndefined';\nimport isFunction from 'lodash/isFunction';\nimport isString from 'lodash/isString';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as CustomPropTypes from './utils/CustomPropTypes';\nimport { makeAccessor } from './utils/Data';\nimport TreeMapNode from './TreeMapNode';\nimport TreeMapNodeLabel from './TreeMapNodeLabel';\n\n/**\n * `TreeMap` displays hierarchical data where a leaf node's rectangle has an area proportional to a specified dimension of the data.\n */\nclass TreeMap extends React.Component {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    /**\n     * Data is an object with a key of `children` and an array of objects as its value.\n     * i.e. { children: [{ children: [{ size: 3 }, { size: 8 }] }, { size: 4 }]}\n     */\n    data: PropTypes.object.isRequired,\n    /**\n     * Key or accessor to retrieve value of data point\n     */\n    getValue: CustomPropTypes.getter,\n    /**\n     * Key or accessor to retrieve children of data point\n     */\n    getChildren: CustomPropTypes.getter,\n    /**\n     * Key or accessor to retrieve label for given Node\n     */\n    getLabel: CustomPropTypes.getter,\n\n    /**\n     * Function passed in to sort nodes\n     */\n    sort: PropTypes.func,\n    // options for d3 treemap layout - see d3 docs\n    /**\n     * See d3 docs for treemap - Adds outer and inner padding to tree\n     */\n    padding: PropTypes.number,\n    /**\n     * See d3 docs for treemap - Enables or disables rounding\n     */\n    round: PropTypes.bool,\n    /**\n     * If sticky, on data change the TreeMap will not force a recreation of the tree and animate data changes.\n     * Otherwise we recreate the tree given its new props\n     */\n    sticky: PropTypes.bool,\n    /**\n     * Sets the desired aspect ratio of the generated rectangles\n     */\n    ratio: PropTypes.number,\n\n    /**\n     * Inline style object applied to each Node,\n     * or accessor function which returns a style object\n     */\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Inline style object applied to each Label,\n     * or accessor function which returns a style object\n     */\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n    /**\n     * `onClick` event handler callback, called when user clicks a NodeComponent.\n     */\n    onClickNode: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a NodeComponent.\n     */\n    onMouseEnterNode: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a NodeComponent.\n     */\n    onMouseLeaveNode: PropTypes.func,\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a NodeComponent.\n     */\n    onMouseMoveNode: PropTypes.func,\n    /**\n     * Optional treemap node, otherwise we default to our TreeMapNode component\n     */\n    NodeComponent: PropTypes.func,\n    /**\n     * Optional treemap node label, otherwise we default to our TreeMapNodeLabel component\n     */\n    NodeLabelComponent: PropTypes.func,\n  };\n  static defaultProps = {\n    getValue: 'value',\n    getChildren: 'children',\n    getLabel: 'name',\n    minLabelWidth: 0,\n    minLabelHeight: 0,\n    NodeComponent: TreeMapNode,\n    NodeLabelComponent: TreeMapNodeLabel,\n  };\n\n  static initTreemap(rootNode, tree, options) {\n    // create a d3 treemap layout function,\n    // and configure it with the given options\n    const { getValue, sort } = options;\n    const treeRoot = rootNode.sum(d => {\n      if (isFunction(getValue)) return getValue(d);\n      else if (isString(getValue)) return d[getValue];\n      return 0;\n    });\n    return tree(sort ? treeRoot.sort(sort) : treeRoot).descendants();\n  }\n\n  static getStateFromProps(props) {\n    const tree = getTree(props);\n    const rootNode = getRootNode(cloneDeep(props.data), props);\n    const prevProps = cloneDeep(props);\n    return { tree, rootNode, prevProps };\n  }\n\n  static getDerivedStateFromProps(newProps, state) {\n    const { width, height, data, sticky } = state.prevProps;\n\n    // if height, width, or the data changes, or if the treemap is not sticky, re-initialize the layout function\n    // todo reevaluate this logic\n    if (\n      !sticky ||\n      width !== newProps.width ||\n      height !== newProps.height ||\n      JSON.stringify(data) !== JSON.stringify(newProps.data)\n    ) {\n      return TreeMap.getStateFromProps(newProps);\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = TreeMap.getStateFromProps(props);\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      nodeStyle,\n      labelStyle,\n      getLabel,\n      minLabelWidth,\n      minLabelHeight,\n      onClickNode,\n      onMouseEnterNode,\n      onMouseLeaveNode,\n      onMouseMoveNode,\n      NodeComponent,\n      NodeLabelComponent,\n    } = this.props;\n\n    const { rootNode, tree } = this.state;\n\n    const nodes = TreeMap.initTreemap(rootNode, tree, this.props);\n\n    const style = { position: 'relative', width, height };\n\n    const parentNames = uniq(map(nodes, 'parent.data.name'));\n\n    return (\n      <div className=\"rct-tree-map\" {...{ style }}>\n        {nodes.map((node, i) => (\n          <NodeComponent\n            {...{\n              node,\n              nodeStyle,\n              minLabelWidth,\n              minLabelHeight,\n              labelStyle,\n              getLabel,\n              parentNames,\n              NodeLabelComponent,\n              onClickNode,\n              onMouseEnterNode,\n              onMouseLeaveNode,\n              onMouseMoveNode,\n              key: `node-${i}`,\n            }}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction getRootNode(data, options) {\n  const { getChildren } = options;\n  return hierarchy(data, makeAccessor(getChildren));\n}\n\nfunction getTree(options) {\n  const { width, height, ratio, round, padding } = options;\n  const tiling = !isUndefined(ratio)\n    ? treemapResquarify.ratio(ratio)\n    : treemapResquarify;\n  const tree = treemap()\n    .tile(tiling)\n    .size([width, height]);\n  if (!isUndefined(padding)) tree.paddingOuter(padding);\n  if (!isUndefined(round)) tree.round(round);\n  return tree;\n}\n\nexport default TreeMap;\n"],"file":"TreeMap.js"}