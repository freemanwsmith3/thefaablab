{"version":3,"sources":["src/Bar.js"],"names":["Bar","React","Component","render","xScale","yScale","x","xEnd","y","yEnd","thickness","style","onMouseEnter","onMouseMove","onMouseLeave","onClick","showLabel","className","labelFormat","labelDistance","labelClassName","props","orientation","classNameForBar","labelClass","rectX","rectY","width","height","xText","yText","textAnchor","textValue","x0","x1","Math","min","abs","max","y0","y1","rect","text","PropTypes","oneOfType","number","string","instanceOf","Date","object","func","bool"],"mappings":"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","sourcesContent":["import invariant from 'invariant';\nimport isUndefined from 'lodash/isUndefined';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { hasOneOfTwo } from './util';\n\n/**\n * Bar is a low-level component to be used in XYPlot-type charts (namely BarChart).\n * It is specified in terms of a range (min & max) of values on one axis and a\n * single value on the other axis.\n * Passing props `x`, `xEnd` and `y` specifies a horizontal bar, centered on `y`\n * and spanning from `x` to `xEnd`.\n * Passing props `x`, `y`, and `yEnd' specifies a vertical bar, centered on `x`\n * and spanning from `y` to `yEnd`.\n */\n\nexport default class Bar extends React.Component {\n  static propTypes = {\n    /**\n     * For a vertical bar, `x` represents the X data value on which the bar is centered.\n     * For a horizontal bar, `x` represents the *starting* X value of the bar, ie. the minimum of the range it spans\n     */\n    x: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]),\n    /**\n     * For a horizontal bar, `y` represents the Y data value on which the bar is centered.\n     * For a vertical bar, `y` represents the *starting* Y value of the bar, ie. the minimum of the range it spans\n     */\n    y: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]),\n    /**\n     * For a horizontal bar, `xEnd` represents the *ending* X data value of the bar, ie. the maximum of the range it spans.\n     * This prop should not be defined if the bar is vertical.\n     */\n    xEnd: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]),\n    /**\n     * For a vertical bar, `yEnd` represents the *ending* Y data value of the bar, ie. the maximum of the range it spans.\n     * This prop should not be defined if the bar is horizontal.\n     */\n    yEnd: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]),\n\n    /**\n     * The thickness of the bar, in pixels. (width of vertical bar, or height of horizontal bar).\n     */\n    thickness: PropTypes.number,\n    /**\n     * Class name(s) to be included on the bar's <rect> element.\n     */\n    className: PropTypes.string,\n    /**\n     * Inline style object to be included on the bar's <rect> element.\n     */\n    style: PropTypes.object,\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within the bar.\n     */\n    onMouseMove: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters the bar.\n     */\n    onMouseEnter: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves the bar.\n     */\n    onMouseLeave: PropTypes.func,\n    /**\n     * `click` event handler callback, called when user clicks the bar.\n     */\n    onClick: PropTypes.func,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * Conditional if column should display values above/beside bar.\n     */\n    showLabel: PropTypes.bool,\n    /**\n     * Format to use for the values or accessor that returns the updated value.\n     */\n    labelFormat: PropTypes.func,\n    /**\n     * The distance from the column the label appears in pixels.\n     */\n    labelDistance: PropTypes.number,\n    /**\n     * Class name(s) to be included on the bar's <text> element.\n     */\n    labelClassName: PropTypes.string,\n  };\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    thickness: 8,\n    className: '',\n    style: {},\n    labelDistance: 24,\n  };\n\n  render() {\n    // x/y are values in the *data* domain, not pixel domain\n    const {\n      xScale,\n      yScale,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      thickness,\n      style,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onClick,\n      showLabel,\n      className,\n      labelFormat,\n      labelDistance,\n      labelClassName,\n    } = this.props;\n\n    invariant(\n      hasOneOfTwo(xEnd, yEnd),\n      `Bar expects an xEnd *or* yEnd prop, but not both.`,\n    );\n\n    const orientation = isUndefined(xEnd) ? 'vertical' : 'horizontal';\n    const classNameForBar = `rct-chart-bar rct-chart-bar-${orientation} ${className}`;\n    const labelClass = `rct-chart-bar-label ${labelClassName || ''}`;\n\n    let rectX;\n    let rectY;\n    let width;\n    let height;\n    let xText;\n    let yText;\n    let textAnchor;\n    let textValue;\n\n    if (orientation === 'horizontal') {\n      rectY = yScale(y) - thickness / 2;\n      const x0 = xScale(x);\n      const x1 = xScale(xEnd);\n      rectX = Math.min(x0, x1);\n      width = Math.abs(x1 - x0);\n      height = thickness;\n\n      // horizontal text formatting to right of bar\n      xText = Math.max(x0, x1) + labelDistance;\n      yText = rectY + thickness / 2 + 5;\n      textAnchor = '';\n      textValue = xEnd;\n    } else {\n      // vertical\n      rectX = xScale(x) - thickness / 2;\n      const y0 = yScale(y);\n      const y1 = yScale(yEnd);\n      rectY = Math.min(y0, y1);\n      height = Math.abs(y1 - y0);\n      width = thickness;\n\n      // vertical text formatting\n      xText = rectX + thickness / 2;\n      yText = rectY - labelDistance;\n      textAnchor = 'middle';\n      textValue = yEnd;\n    }\n\n    const rect = (\n      <rect\n        aria-hidden=\"true\"\n        {...{\n          x: rectX,\n          y: rectY,\n          className: classNameForBar,\n          width,\n          height,\n          style,\n          onMouseEnter,\n          onMouseMove,\n          onMouseLeave,\n          onClick,\n        }}\n      />\n    );\n\n    const text = (\n      <text\n        {...{\n          textAnchor,\n          x: xText,\n          y: yText,\n          className: labelClass,\n        }}\n      >\n        {labelFormat ? labelFormat(textValue) : textValue}\n      </text>\n    );\n\n    if (showLabel) {\n      return (\n        <g aria-hidden=\"true\">\n          {rect}\n          {text}\n        </g>\n      );\n    }\n\n    return rect;\n  }\n}\n"],"file":"Bar.js"}